group = 'io.swagger'
project.version = '1.0.0'

buildscript {
    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 28
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    // Rename the aar correctly
    libraryVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.aar')) {
                //outputFileName = "${archivesBaseName}-${android.defaultConfig.versionName}.aar"
                outputFileName = "${project.name}-${variant.baseName}-${version}.aar"
            }
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    implementation "io.swagger:swagger-annotations:1.5.0"
    implementation "com.google.code.gson:gson:2.8.2"
    implementation "org.apache.httpcomponents:httpcore:4.4.9"
    // httpmime above 4.3.6 crashes during API call error handling:
    // java.lang.NoSuchFieldError: org.apache.http.message.BasicHeaderValueFormatter.INSTANCE
    //noinspection GradleDependency
    implementation "org.apache.httpcomponents:httpmime:4.3.6"
    implementation "com.android.volley:volley:1.1.1"
    testImplementation "junit:junit:4.12"
    testImplementation "org.robolectric:robolectric:3.0"
    testImplementation "net.jodah:concurrentunit:0.4.2"
}

afterEvaluate {
    android.libraryVariants.all { variant ->
        def task = project.tasks.create "jar${variant.name.capitalize()}", Jar
        task.description = "Create jar artifact for ${variant.name}"
        task.dependsOn variant.javaCompile
        task.from variant.javaCompile.destinationDir
        task.destinationDir = project.file("${project.buildDir}/outputs/jar")
        task.archiveName = "${project.name}-${variant.baseName}-${version}.jar"
        artifacts.add('archives', task);
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}
