/**
 * TradingView REST API Specification for Brokers
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import io.swagger.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Account".equalsIgnoreCase(className)) {
      return new TypeToken<List<Account>>(){}.getType();
    }
    
    if ("AccountFlags".equalsIgnoreCase(className)) {
      return new TypeToken<List<AccountFlags>>(){}.getType();
    }
    
    if ("AccountManagerColumn".equalsIgnoreCase(className)) {
      return new TypeToken<List<AccountManagerColumn>>(){}.getType();
    }
    
    if ("AccountManagerTable".equalsIgnoreCase(className)) {
      return new TypeToken<List<AccountManagerTable>>(){}.getType();
    }
    
    if ("AccountStateResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<AccountStateResponse>>(){}.getType();
    }
    
    if ("AuthorizationResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<AuthorizationResponse>>(){}.getType();
    }
    
    if ("BarsArrays".equalsIgnoreCase(className)) {
      return new TypeToken<List<BarsArrays>>(){}.getType();
    }
    
    if ("ConfigResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<ConfigResponse>>(){}.getType();
    }
    
    if ("Depth".equalsIgnoreCase(className)) {
      return new TypeToken<List<Depth>>(){}.getType();
    }
    
    if ("DepthItem".equalsIgnoreCase(className)) {
      return new TypeToken<List<DepthItem>>(){}.getType();
    }
    
    if ("Duration".equalsIgnoreCase(className)) {
      return new TypeToken<List<Duration>>(){}.getType();
    }
    
    if ("Execution".equalsIgnoreCase(className)) {
      return new TypeToken<List<Execution>>(){}.getType();
    }
    
    if ("InlineResponse200".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse200>>(){}.getType();
    }
    
    if ("InlineResponse2001".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2001>>(){}.getType();
    }
    
    if ("InlineResponse20010".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse20010>>(){}.getType();
    }
    
    if ("InlineResponse20011".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse20011>>(){}.getType();
    }
    
    if ("InlineResponse20012".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse20012>>(){}.getType();
    }
    
    if ("InlineResponse20013".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse20013>>(){}.getType();
    }
    
    if ("InlineResponse20014".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse20014>>(){}.getType();
    }
    
    if ("InlineResponse2002".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2002>>(){}.getType();
    }
    
    if ("InlineResponse2003".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2003>>(){}.getType();
    }
    
    if ("InlineResponse2004".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2004>>(){}.getType();
    }
    
    if ("InlineResponse2005".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2005>>(){}.getType();
    }
    
    if ("InlineResponse2005D".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2005D>>(){}.getType();
    }
    
    if ("InlineResponse2006".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2006>>(){}.getType();
    }
    
    if ("InlineResponse2007".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2007>>(){}.getType();
    }
    
    if ("InlineResponse2008".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2008>>(){}.getType();
    }
    
    if ("InlineResponse2009".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2009>>(){}.getType();
    }
    
    if ("Instrument".equalsIgnoreCase(className)) {
      return new TypeToken<List<Instrument>>(){}.getType();
    }
    
    if ("MarksArrays".equalsIgnoreCase(className)) {
      return new TypeToken<List<MarksArrays>>(){}.getType();
    }
    
    if ("Order".equalsIgnoreCase(className)) {
      return new TypeToken<List<Order>>(){}.getType();
    }
    
    if ("OrderDuration".equalsIgnoreCase(className)) {
      return new TypeToken<List<OrderDuration>>(){}.getType();
    }
    
    if ("Position".equalsIgnoreCase(className)) {
      return new TypeToken<List<Position>>(){}.getType();
    }
    
    if ("PullingInterval".equalsIgnoreCase(className)) {
      return new TypeToken<List<PullingInterval>>(){}.getType();
    }
    
    if ("QuotesResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<QuotesResponse>>(){}.getType();
    }
    
    if ("SingleField".equalsIgnoreCase(className)) {
      return new TypeToken<List<SingleField>>(){}.getType();
    }
    
    if ("SingleMapping".equalsIgnoreCase(className)) {
      return new TypeToken<List<SingleMapping>>(){}.getType();
    }
    
    if ("SingleQuote".equalsIgnoreCase(className)) {
      return new TypeToken<List<SingleQuote>>(){}.getType();
    }
    
    if ("Status".equalsIgnoreCase(className)) {
      return new TypeToken<List<String>>(){}.getType();
    }
    
    if ("SymbolInfoArrays".equalsIgnoreCase(className)) {
      return new TypeToken<List<SymbolInfoArrays>>(){}.getType();
    }
    
    if ("SymbolMapping".equalsIgnoreCase(className)) {
      return new TypeToken<List<SymbolMapping>>(){}.getType();
    }
    
    if ("TimescaleMark".equalsIgnoreCase(className)) {
      return new TypeToken<List<TimescaleMark>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Account".equalsIgnoreCase(className)) {
      return new TypeToken<Account>(){}.getType();
    }
    
    if ("AccountFlags".equalsIgnoreCase(className)) {
      return new TypeToken<AccountFlags>(){}.getType();
    }
    
    if ("AccountManagerColumn".equalsIgnoreCase(className)) {
      return new TypeToken<AccountManagerColumn>(){}.getType();
    }
    
    if ("AccountManagerTable".equalsIgnoreCase(className)) {
      return new TypeToken<AccountManagerTable>(){}.getType();
    }
    
    if ("AccountStateResponse".equalsIgnoreCase(className)) {
      return new TypeToken<AccountStateResponse>(){}.getType();
    }
    
    if ("AuthorizationResponse".equalsIgnoreCase(className)) {
      return new TypeToken<AuthorizationResponse>(){}.getType();
    }
    
    if ("BarsArrays".equalsIgnoreCase(className)) {
      return new TypeToken<BarsArrays>(){}.getType();
    }
    
    if ("ConfigResponse".equalsIgnoreCase(className)) {
      return new TypeToken<ConfigResponse>(){}.getType();
    }
    
    if ("Depth".equalsIgnoreCase(className)) {
      return new TypeToken<Depth>(){}.getType();
    }
    
    if ("DepthItem".equalsIgnoreCase(className)) {
      return new TypeToken<DepthItem>(){}.getType();
    }
    
    if ("Duration".equalsIgnoreCase(className)) {
      return new TypeToken<Duration>(){}.getType();
    }
    
    if ("Execution".equalsIgnoreCase(className)) {
      return new TypeToken<Execution>(){}.getType();
    }
    
    if ("InlineResponse200".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse200>(){}.getType();
    }
    
    if ("InlineResponse2001".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2001>(){}.getType();
    }
    
    if ("InlineResponse20010".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse20010>(){}.getType();
    }
    
    if ("InlineResponse20011".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse20011>(){}.getType();
    }
    
    if ("InlineResponse20012".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse20012>(){}.getType();
    }
    
    if ("InlineResponse20013".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse20013>(){}.getType();
    }
    
    if ("InlineResponse20014".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse20014>(){}.getType();
    }
    
    if ("InlineResponse2002".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2002>(){}.getType();
    }
    
    if ("InlineResponse2003".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2003>(){}.getType();
    }
    
    if ("InlineResponse2004".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2004>(){}.getType();
    }
    
    if ("InlineResponse2005".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2005>(){}.getType();
    }
    
    if ("InlineResponse2005D".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2005D>(){}.getType();
    }
    
    if ("InlineResponse2006".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2006>(){}.getType();
    }
    
    if ("InlineResponse2007".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2007>(){}.getType();
    }
    
    if ("InlineResponse2008".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2008>(){}.getType();
    }
    
    if ("InlineResponse2009".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2009>(){}.getType();
    }
    
    if ("Instrument".equalsIgnoreCase(className)) {
      return new TypeToken<Instrument>(){}.getType();
    }
    
    if ("MarksArrays".equalsIgnoreCase(className)) {
      return new TypeToken<MarksArrays>(){}.getType();
    }
    
    if ("Order".equalsIgnoreCase(className)) {
      return new TypeToken<Order>(){}.getType();
    }
    
    if ("OrderDuration".equalsIgnoreCase(className)) {
      return new TypeToken<OrderDuration>(){}.getType();
    }
    
    if ("Position".equalsIgnoreCase(className)) {
      return new TypeToken<Position>(){}.getType();
    }
    
    if ("PullingInterval".equalsIgnoreCase(className)) {
      return new TypeToken<PullingInterval>(){}.getType();
    }
    
    if ("QuotesResponse".equalsIgnoreCase(className)) {
      return new TypeToken<QuotesResponse>(){}.getType();
    }
    
    if ("SingleField".equalsIgnoreCase(className)) {
      return new TypeToken<SingleField>(){}.getType();
    }
    
    if ("SingleMapping".equalsIgnoreCase(className)) {
      return new TypeToken<SingleMapping>(){}.getType();
    }
    
    if ("SingleQuote".equalsIgnoreCase(className)) {
      return new TypeToken<SingleQuote>(){}.getType();
    }
    
    if ("Status".equalsIgnoreCase(className)) {
      return new TypeToken<String>(){}.getType();
    }
    
    if ("SymbolInfoArrays".equalsIgnoreCase(className)) {
      return new TypeToken<SymbolInfoArrays>(){}.getType();
    }
    
    if ("SymbolMapping".equalsIgnoreCase(className)) {
      return new TypeToken<SymbolMapping>(){}.getType();
    }
    
    if ("TimescaleMark".equalsIgnoreCase(className)) {
      return new TypeToken<TimescaleMark>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
