/**
 * XchangeCrypt REST API Specification
 * TradingView REST API Specification for Brokers (ASP.NET Core 2.0)
 * <p>
 * OpenAPI spec version: v1
 * Contact:
 * <p>
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 *
 **/
@ApiModel(description = "")
public class AccountFlags {

  @SerializedName("showQuantityInsteadOfAmount")
  private Boolean showQuantityInsteadOfAmount = null;
  @SerializedName("supportDOM")
  private Boolean supportDOM = null;
  @SerializedName("supportBrackets")
  private Boolean supportBrackets = null;
  @SerializedName("supportOrderBrackets")
  private Boolean supportOrderBrackets = null;
  @SerializedName("supportPositionBrackets")
  private Boolean supportPositionBrackets = null;
  @SerializedName("supportClosePosition")
  private Boolean supportClosePosition = null;
  @SerializedName("supportEditAmount")
  private Boolean supportEditAmount = null;
  @SerializedName("supportLevel2Data")
  private Boolean supportLevel2Data = null;
  @SerializedName("supportMultiposition")
  private Boolean supportMultiposition = null;
  @SerializedName("supportPLUpdate")
  private Boolean supportPLUpdate = null;
  @SerializedName("supportReducePosition")
  private Boolean supportReducePosition = null;
  @SerializedName("supportStopLimitOrders")
  private Boolean supportStopLimitOrders = null;
  @SerializedName("supportOrdersHistory")
  private Boolean supportOrdersHistory = null;
  @SerializedName("supportExecutions")
  private Boolean supportExecutions = null;
  @SerializedName("supportDigitalSignature")
  private Boolean supportDigitalSignature = null;

  /**
   * Renames Amount to Quantity in the Order Ticket
   **/
  @ApiModelProperty(value = "Renames Amount to Quantity in the Order Ticket")
  public Boolean getShowQuantityInsteadOfAmount() {
    return showQuantityInsteadOfAmount;
  }

  public void setShowQuantityInsteadOfAmount(Boolean showQuantityInsteadOfAmount) {
    this.showQuantityInsteadOfAmount = showQuantityInsteadOfAmount;
  }

  /**
   * Whether you want for DOM (Depth of market) widget to be available
   **/
  @ApiModelProperty(value = "Whether you want for DOM (Depth of market) widget to be available")
  public Boolean getSupportDOM() {
    return supportDOM;
  }

  public void setSupportDOM(Boolean supportDOM) {
    this.supportDOM = supportDOM;
  }

  /**
   * Whether you support brackets. Deprecated. Use supportOrderBrackets and supportPositionBrackets instead.
   **/
  @ApiModelProperty(value = "Whether you support brackets. Deprecated. Use supportOrderBrackets and supportPositionBrackets instead.")
  public Boolean getSupportBrackets() {
    return supportBrackets;
  }

  public void setSupportBrackets(Boolean supportBrackets) {
    this.supportBrackets = supportBrackets;
  }

  /**
   * Whether you support adding (or modifying) stop loss and take profit to orders
   **/
  @ApiModelProperty(value = "Whether you support adding (or modifying) stop loss and take profit to orders")
  public Boolean getSupportOrderBrackets() {
    return supportOrderBrackets;
  }

  public void setSupportOrderBrackets(Boolean supportOrderBrackets) {
    this.supportOrderBrackets = supportOrderBrackets;
  }

  /**
   * Whether you support adding (or modifying) stop loss and take profit to positions
   **/
  @ApiModelProperty(value = "Whether you support adding (or modifying) stop loss and take profit to positions")
  public Boolean getSupportPositionBrackets() {
    return supportPositionBrackets;
  }

  public void setSupportPositionBrackets(Boolean supportPositionBrackets) {
    this.supportPositionBrackets = supportPositionBrackets;
  }

  /**
   * Whether you support closing of a position without a need for a user to fill an order. If it is `true` the Trading Terminal shows a confirmation dialog and sends a DELETE request instead of bringing up an order ticket.
   **/
  @ApiModelProperty(value = "Whether you support closing of a position without a need for a user to fill an order. If it is `true` the Trading Terminal shows a confirmation dialog and sends a DELETE request instead of bringing up an order ticket.")
  public Boolean getSupportClosePosition() {
    return supportClosePosition;
  }

  public void setSupportClosePosition(Boolean supportClosePosition) {
    this.supportClosePosition = supportClosePosition;
  }

  /**
   * Whether you support editing orders quantity. If you set it to `false`, the quantity control in the order ticket will be disabled when modifing an order.
   **/
  @ApiModelProperty(value = "Whether you support editing orders quantity. If you set it to `false`, the quantity control in the order ticket will be disabled when modifing an order.")
  public Boolean getSupportEditAmount() {
    return supportEditAmount;
  }

  public void setSupportEditAmount(Boolean supportEditAmount) {
    this.supportEditAmount = supportEditAmount;
  }

  /**
   * Whether you support Level 2 data. It is required to display DOM levels. You must implement `/streaming` to display DOM.
   **/
  @ApiModelProperty(value = "Whether you support Level 2 data. It is required to display DOM levels. You must implement `/streaming` to display DOM.")
  public Boolean getSupportLevel2Data() {
    return supportLevel2Data;
  }

  public void setSupportLevel2Data(Boolean supportLevel2Data) {
    this.supportLevel2Data = supportLevel2Data;
  }

  /**
   * Whether you support multiple positions at one instrument at the same time
   **/
  @ApiModelProperty(value = "Whether you support multiple positions at one instrument at the same time")
  public Boolean getSupportMultiposition() {
    return supportMultiposition;
  }

  public void setSupportMultiposition(Boolean supportMultiposition) {
    this.supportMultiposition = supportMultiposition;
  }

  /**
   * Whether you provide `unrealizedPl` for positions. Otherwise P&amp;L will be calculated automatically based on a simple algorithm
   **/
  @ApiModelProperty(value = "Whether you provide `unrealizedPl` for positions. Otherwise P&amp;L will be calculated automatically based on a simple algorithm")
  public Boolean getSupportPLUpdate() {
    return supportPLUpdate;
  }

  public void setSupportPLUpdate(Boolean supportPLUpdate) {
    this.supportPLUpdate = supportPLUpdate;
  }

  /**
   * Reserved for future use
   **/
  @ApiModelProperty(value = "Reserved for future use")
  public Boolean getSupportReducePosition() {
    return supportReducePosition;
  }

  public void setSupportReducePosition(Boolean supportReducePosition) {
    this.supportReducePosition = supportReducePosition;
  }

  /**
   * Whether you support StopLimit orders
   **/
  @ApiModelProperty(value = "Whether you support StopLimit orders")
  public Boolean getSupportStopLimitOrders() {
    return supportStopLimitOrders;
  }

  public void setSupportStopLimitOrders(Boolean supportStopLimitOrders) {
    this.supportStopLimitOrders = supportStopLimitOrders;
  }

  /**
   * Whether you support /ordersHistory request
   **/
  @ApiModelProperty(value = "Whether you support /ordersHistory request")
  public Boolean getSupportOrdersHistory() {
    return supportOrdersHistory;
  }

  public void setSupportOrdersHistory(Boolean supportOrdersHistory) {
    this.supportOrdersHistory = supportOrdersHistory;
  }

  /**
   * Whether you support /executions request
   **/
  @ApiModelProperty(value = "Whether you support /executions request")
  public Boolean getSupportExecutions() {
    return supportExecutions;
  }

  public void setSupportExecutions(Boolean supportExecutions) {
    this.supportExecutions = supportExecutions;
  }

  /**
   * Whether you support Digital signature input field in the Order Ticket
   **/
  @ApiModelProperty(value = "Whether you support Digital signature input field in the Order Ticket")
  public Boolean getSupportDigitalSignature() {
    return supportDigitalSignature;
  }

  public void setSupportDigitalSignature(Boolean supportDigitalSignature) {
    this.supportDigitalSignature = supportDigitalSignature;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountFlags accountFlags = (AccountFlags) o;
    return (this.showQuantityInsteadOfAmount == null ? accountFlags.showQuantityInsteadOfAmount == null : this.showQuantityInsteadOfAmount.equals(accountFlags.showQuantityInsteadOfAmount)) &&
      (this.supportDOM == null ? accountFlags.supportDOM == null : this.supportDOM.equals(accountFlags.supportDOM)) &&
      (this.supportBrackets == null ? accountFlags.supportBrackets == null : this.supportBrackets.equals(accountFlags.supportBrackets)) &&
      (this.supportOrderBrackets == null ? accountFlags.supportOrderBrackets == null : this.supportOrderBrackets.equals(accountFlags.supportOrderBrackets)) &&
      (this.supportPositionBrackets == null ? accountFlags.supportPositionBrackets == null : this.supportPositionBrackets.equals(accountFlags.supportPositionBrackets)) &&
      (this.supportClosePosition == null ? accountFlags.supportClosePosition == null : this.supportClosePosition.equals(accountFlags.supportClosePosition)) &&
      (this.supportEditAmount == null ? accountFlags.supportEditAmount == null : this.supportEditAmount.equals(accountFlags.supportEditAmount)) &&
      (this.supportLevel2Data == null ? accountFlags.supportLevel2Data == null : this.supportLevel2Data.equals(accountFlags.supportLevel2Data)) &&
      (this.supportMultiposition == null ? accountFlags.supportMultiposition == null : this.supportMultiposition.equals(accountFlags.supportMultiposition)) &&
      (this.supportPLUpdate == null ? accountFlags.supportPLUpdate == null : this.supportPLUpdate.equals(accountFlags.supportPLUpdate)) &&
      (this.supportReducePosition == null ? accountFlags.supportReducePosition == null : this.supportReducePosition.equals(accountFlags.supportReducePosition)) &&
      (this.supportStopLimitOrders == null ? accountFlags.supportStopLimitOrders == null : this.supportStopLimitOrders.equals(accountFlags.supportStopLimitOrders)) &&
      (this.supportOrdersHistory == null ? accountFlags.supportOrdersHistory == null : this.supportOrdersHistory.equals(accountFlags.supportOrdersHistory)) &&
      (this.supportExecutions == null ? accountFlags.supportExecutions == null : this.supportExecutions.equals(accountFlags.supportExecutions)) &&
      (this.supportDigitalSignature == null ? accountFlags.supportDigitalSignature == null : this.supportDigitalSignature.equals(accountFlags.supportDigitalSignature));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.showQuantityInsteadOfAmount == null ? 0 : this.showQuantityInsteadOfAmount.hashCode());
    result = 31 * result + (this.supportDOM == null ? 0 : this.supportDOM.hashCode());
    result = 31 * result + (this.supportBrackets == null ? 0 : this.supportBrackets.hashCode());
    result = 31 * result + (this.supportOrderBrackets == null ? 0 : this.supportOrderBrackets.hashCode());
    result = 31 * result + (this.supportPositionBrackets == null ? 0 : this.supportPositionBrackets.hashCode());
    result = 31 * result + (this.supportClosePosition == null ? 0 : this.supportClosePosition.hashCode());
    result = 31 * result + (this.supportEditAmount == null ? 0 : this.supportEditAmount.hashCode());
    result = 31 * result + (this.supportLevel2Data == null ? 0 : this.supportLevel2Data.hashCode());
    result = 31 * result + (this.supportMultiposition == null ? 0 : this.supportMultiposition.hashCode());
    result = 31 * result + (this.supportPLUpdate == null ? 0 : this.supportPLUpdate.hashCode());
    result = 31 * result + (this.supportReducePosition == null ? 0 : this.supportReducePosition.hashCode());
    result = 31 * result + (this.supportStopLimitOrders == null ? 0 : this.supportStopLimitOrders.hashCode());
    result = 31 * result + (this.supportOrdersHistory == null ? 0 : this.supportOrdersHistory.hashCode());
    result = 31 * result + (this.supportExecutions == null ? 0 : this.supportExecutions.hashCode());
    result = 31 * result + (this.supportDigitalSignature == null ? 0 : this.supportDigitalSignature.hashCode());
    return result;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountFlags {\n");

    sb.append("  showQuantityInsteadOfAmount: ").append(showQuantityInsteadOfAmount).append("\n");
    sb.append("  supportDOM: ").append(supportDOM).append("\n");
    sb.append("  supportBrackets: ").append(supportBrackets).append("\n");
    sb.append("  supportOrderBrackets: ").append(supportOrderBrackets).append("\n");
    sb.append("  supportPositionBrackets: ").append(supportPositionBrackets).append("\n");
    sb.append("  supportClosePosition: ").append(supportClosePosition).append("\n");
    sb.append("  supportEditAmount: ").append(supportEditAmount).append("\n");
    sb.append("  supportLevel2Data: ").append(supportLevel2Data).append("\n");
    sb.append("  supportMultiposition: ").append(supportMultiposition).append("\n");
    sb.append("  supportPLUpdate: ").append(supportPLUpdate).append("\n");
    sb.append("  supportReducePosition: ").append(supportReducePosition).append("\n");
    sb.append("  supportStopLimitOrders: ").append(supportStopLimitOrders).append("\n");
    sb.append("  supportOrdersHistory: ").append(supportOrdersHistory).append("\n");
    sb.append("  supportExecutions: ").append(supportExecutions).append("\n");
    sb.append("  supportDigitalSignature: ").append(supportDigitalSignature).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
