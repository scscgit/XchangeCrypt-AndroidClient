/**
 * TradingView REST API Specification for Brokers
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.math.BigDecimal;
import java.util.*;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * SymbolInfo is an object containing symbols metadata. Each value of this object is an array of values which size is equal to symbols count or a single value that is applied to all symbols.
 **/
@ApiModel(description = "SymbolInfo is an object containing symbols metadata. Each value of this object is an array of values which size is equal to symbols count or a single value that is applied to all symbols.")
public class SymbolInfoArrays {
  
  @SerializedName("symbol")
  private List<String> symbol = null;
  @SerializedName("description")
  private List<String> description = null;
  @SerializedName("exchange-listed")
  private List<String> exchangeListed = null;
  @SerializedName("exchange-traded")
  private List<String> exchangeTraded = null;
  @SerializedName("minmovement")
  private List<BigDecimal> minmovement = null;
  @SerializedName("minmov2")
  private List<BigDecimal> minmov2 = null;
  @SerializedName("fractional")
  private List<Boolean> fractional = null;
  @SerializedName("pricescale")
  private List<BigDecimal> pricescale = null;
  @SerializedName("has-intraday")
  private List<Boolean> hasIntraday = null;
  @SerializedName("has-no-volume")
  private List<Boolean> hasNoVolume = null;
  @SerializedName("type")
  private List<String> type = null;
  @SerializedName("ticker")
  private List<String> ticker = null;
  @SerializedName("timezone")
  private List<String> timezone = null;
  @SerializedName("session-regular")
  private List<String> sessionRegular = null;
  @SerializedName("supported-resolutions")
  private List<List<String>> supportedResolutions = null;
  @SerializedName("has-daily")
  private List<Boolean> hasDaily = null;
  @SerializedName("intraday-multipliers")
  private List<List<String>> intradayMultipliers = null;
  @SerializedName("has-weekly-and-monthly")
  private List<Boolean> hasWeeklyAndMonthly = null;

  /**
   * It's name of a symbol. It is a string which your users will see. Also, it will be used for data requests if you are not using tickers.
   **/
  @ApiModelProperty(required = true, value = "It's name of a symbol. It is a string which your users will see. Also, it will be used for data requests if you are not using tickers.")
  public List<String> getSymbol() {
    return symbol;
  }
  public void setSymbol(List<String> symbol) {
    this.symbol = symbol;
  }

  /**
   * Description of a symbol. Will be printed in chart legend for this symbol.
   **/
  @ApiModelProperty(required = true, value = "Description of a symbol. Will be printed in chart legend for this symbol.")
  public List<String> getDescription() {
    return description;
  }
  public void setDescription(List<String> description) {
    this.description = description;
  }

  /**
   * Short name of exchange where this symbol is listed
   **/
  @ApiModelProperty(required = true, value = "Short name of exchange where this symbol is listed")
  public List<String> getExchangeListed() {
    return exchangeListed;
  }
  public void setExchangeListed(List<String> exchangeListed) {
    this.exchangeListed = exchangeListed;
  }

  /**
   * Short name of exchange where this symbol is traded
   **/
  @ApiModelProperty(required = true, value = "Short name of exchange where this symbol is traded")
  public List<String> getExchangeTraded() {
    return exchangeTraded;
  }
  public void setExchangeTraded(List<String> exchangeTraded) {
    this.exchangeTraded = exchangeTraded;
  }

  /**
   * Minimal integer price change
   **/
  @ApiModelProperty(required = true, value = "Minimal integer price change")
  public List<BigDecimal> getMinmovement() {
    return minmovement;
  }
  public void setMinmovement(List<BigDecimal> minmovement) {
    this.minmovement = minmovement;
  }

  /**
   * It's a number for complex price formatting cases
   **/
  @ApiModelProperty(value = "It's a number for complex price formatting cases")
  public List<BigDecimal> getMinmov2() {
    return minmov2;
  }
  public void setMinmov2(List<BigDecimal> minmov2) {
    this.minmov2 = minmov2;
  }

  /**
   * Boolean showing whether this symbol wants to have complex price formatting (see minmov2) or not
   **/
  @ApiModelProperty(value = "Boolean showing whether this symbol wants to have complex price formatting (see minmov2) or not")
  public List<Boolean> getFractional() {
    return fractional;
  }
  public void setFractional(List<Boolean> fractional) {
    this.fractional = fractional;
  }

  /**
   * MinimalPossiblePriceChange = minmovement / pricescale
   **/
  @ApiModelProperty(required = true, value = "MinimalPossiblePriceChange = minmovement / pricescale")
  public List<BigDecimal> getPricescale() {
    return pricescale;
  }
  public void setPricescale(List<BigDecimal> pricescale) {
    this.pricescale = pricescale;
  }

  /**
   * Boolean showing whether symbol has intraday (minutes) history data. If it's false then all buttons for intradays resolutions will be disabled when this symbol is active in chart. If it is set to true, all resolutions that are supplied directly by the datafeed must be provided in intraday_multipliers array.
   **/
  @ApiModelProperty(value = "Boolean showing whether symbol has intraday (minutes) history data. If it's false then all buttons for intradays resolutions will be disabled when this symbol is active in chart. If it is set to true, all resolutions that are supplied directly by the datafeed must be provided in intraday_multipliers array.")
  public List<Boolean> getHasIntraday() {
    return hasIntraday;
  }
  public void setHasIntraday(List<Boolean> hasIntraday) {
    this.hasIntraday = hasIntraday;
  }

  /**
   * Boolean showing whether symbol has volume data or not
   **/
  @ApiModelProperty(value = "Boolean showing whether symbol has volume data or not")
  public List<Boolean> getHasNoVolume() {
    return hasNoVolume;
  }
  public void setHasNoVolume(List<Boolean> hasNoVolume) {
    this.hasNoVolume = hasNoVolume;
  }

  /**
   * Symbol type (forex/stock etc.)
   **/
  @ApiModelProperty(value = "Symbol type (forex/stock etc.)")
  public List<String> getType() {
    return type;
  }
  public void setType(List<String> type) {
    this.type = type;
  }

  /**
   * It's an unique identifier for this symbol in your symbology. If you specify this property then its value will be used for all data requests for this symbol. ticker is treated to be equal to symbol if not specified explicitly.
   **/
  @ApiModelProperty(value = "It's an unique identifier for this symbol in your symbology. If you specify this property then its value will be used for all data requests for this symbol. ticker is treated to be equal to symbol if not specified explicitly.")
  public List<String> getTicker() {
    return ticker;
  }
  public void setTicker(List<String> ticker) {
    this.ticker = ticker;
  }

  /**
   * Exchange timezone for this symbol. We expect to get name of time zone in olsondb format
   **/
  @ApiModelProperty(required = true, value = "Exchange timezone for this symbol. We expect to get name of time zone in olsondb format")
  public List<String> getTimezone() {
    return timezone;
  }
  public void setTimezone(List<String> timezone) {
    this.timezone = timezone;
  }

  /**
   * Trading hours for this symbol. See the [Trading Sessions](https://github.com/tradingview/charting_library/wiki/Trading-Sessions) article to know more details.
   **/
  @ApiModelProperty(required = true, value = "Trading hours for this symbol. See the [Trading Sessions](https://github.com/tradingview/charting_library/wiki/Trading-Sessions) article to know more details.")
  public List<String> getSessionRegular() {
    return sessionRegular;
  }
  public void setSessionRegular(List<String> sessionRegular) {
    this.sessionRegular = sessionRegular;
  }

  /**
   * An array of resolutions which should be enabled in resolutions picker for this symbol. Each item of an array is expected to be a string.
   **/
  @ApiModelProperty(value = "An array of resolutions which should be enabled in resolutions picker for this symbol. Each item of an array is expected to be a string.")
  public List<List<String>> getSupportedResolutions() {
    return supportedResolutions;
  }
  public void setSupportedResolutions(List<List<String>> supportedResolutions) {
    this.supportedResolutions = supportedResolutions;
  }

  /**
   * The boolean value showing whether datafeed has its own D resolution bars or not. If has_daily = false then Charting Library will build respective resolutions from intraday by itself. If not, then it will request those bars from datafeed.
   **/
  @ApiModelProperty(value = "The boolean value showing whether datafeed has its own D resolution bars or not. If has_daily = false then Charting Library will build respective resolutions from intraday by itself. If not, then it will request those bars from datafeed.")
  public List<Boolean> getHasDaily() {
    return hasDaily;
  }
  public void setHasDaily(List<Boolean> hasDaily) {
    this.hasDaily = hasDaily;
  }

  /**
   * It is an array containing intraday resolutions (in minutes) the datafeed wants to build by itself. E.g., if the datafeed reported he supports resolutions [\"1\", \"5\", \"15\"], but in fact it has only 1 minute bars for symbol X, it should set intraday_multipliers of X = [1]. This will make Charting Library to build 5 and 15 resolutions by itself.
   **/
  @ApiModelProperty(value = "It is an array containing intraday resolutions (in minutes) the datafeed wants to build by itself. E.g., if the datafeed reported he supports resolutions [\"1\", \"5\", \"15\"], but in fact it has only 1 minute bars for symbol X, it should set intraday_multipliers of X = [1]. This will make Charting Library to build 5 and 15 resolutions by itself.")
  public List<List<String>> getIntradayMultipliers() {
    return intradayMultipliers;
  }
  public void setIntradayMultipliers(List<List<String>> intradayMultipliers) {
    this.intradayMultipliers = intradayMultipliers;
  }

  /**
   * The boolean value showing whether datafeed has its own W and M resolution bars or not. If has_weekly_and_monthly = false then Charting Library will build respective resolutions from D by itself. If not, then it will request those bars from datafeed.
   **/
  @ApiModelProperty(value = "The boolean value showing whether datafeed has its own W and M resolution bars or not. If has_weekly_and_monthly = false then Charting Library will build respective resolutions from D by itself. If not, then it will request those bars from datafeed.")
  public List<Boolean> getHasWeeklyAndMonthly() {
    return hasWeeklyAndMonthly;
  }
  public void setHasWeeklyAndMonthly(List<Boolean> hasWeeklyAndMonthly) {
    this.hasWeeklyAndMonthly = hasWeeklyAndMonthly;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SymbolInfoArrays symbolInfoArrays = (SymbolInfoArrays) o;
    return (this.symbol == null ? symbolInfoArrays.symbol == null : this.symbol.equals(symbolInfoArrays.symbol)) &&
        (this.description == null ? symbolInfoArrays.description == null : this.description.equals(symbolInfoArrays.description)) &&
        (this.exchangeListed == null ? symbolInfoArrays.exchangeListed == null : this.exchangeListed.equals(symbolInfoArrays.exchangeListed)) &&
        (this.exchangeTraded == null ? symbolInfoArrays.exchangeTraded == null : this.exchangeTraded.equals(symbolInfoArrays.exchangeTraded)) &&
        (this.minmovement == null ? symbolInfoArrays.minmovement == null : this.minmovement.equals(symbolInfoArrays.minmovement)) &&
        (this.minmov2 == null ? symbolInfoArrays.minmov2 == null : this.minmov2.equals(symbolInfoArrays.minmov2)) &&
        (this.fractional == null ? symbolInfoArrays.fractional == null : this.fractional.equals(symbolInfoArrays.fractional)) &&
        (this.pricescale == null ? symbolInfoArrays.pricescale == null : this.pricescale.equals(symbolInfoArrays.pricescale)) &&
        (this.hasIntraday == null ? symbolInfoArrays.hasIntraday == null : this.hasIntraday.equals(symbolInfoArrays.hasIntraday)) &&
        (this.hasNoVolume == null ? symbolInfoArrays.hasNoVolume == null : this.hasNoVolume.equals(symbolInfoArrays.hasNoVolume)) &&
        (this.type == null ? symbolInfoArrays.type == null : this.type.equals(symbolInfoArrays.type)) &&
        (this.ticker == null ? symbolInfoArrays.ticker == null : this.ticker.equals(symbolInfoArrays.ticker)) &&
        (this.timezone == null ? symbolInfoArrays.timezone == null : this.timezone.equals(symbolInfoArrays.timezone)) &&
        (this.sessionRegular == null ? symbolInfoArrays.sessionRegular == null : this.sessionRegular.equals(symbolInfoArrays.sessionRegular)) &&
        (this.supportedResolutions == null ? symbolInfoArrays.supportedResolutions == null : this.supportedResolutions.equals(symbolInfoArrays.supportedResolutions)) &&
        (this.hasDaily == null ? symbolInfoArrays.hasDaily == null : this.hasDaily.equals(symbolInfoArrays.hasDaily)) &&
        (this.intradayMultipliers == null ? symbolInfoArrays.intradayMultipliers == null : this.intradayMultipliers.equals(symbolInfoArrays.intradayMultipliers)) &&
        (this.hasWeeklyAndMonthly == null ? symbolInfoArrays.hasWeeklyAndMonthly == null : this.hasWeeklyAndMonthly.equals(symbolInfoArrays.hasWeeklyAndMonthly));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.symbol == null ? 0: this.symbol.hashCode());
    result = 31 * result + (this.description == null ? 0: this.description.hashCode());
    result = 31 * result + (this.exchangeListed == null ? 0: this.exchangeListed.hashCode());
    result = 31 * result + (this.exchangeTraded == null ? 0: this.exchangeTraded.hashCode());
    result = 31 * result + (this.minmovement == null ? 0: this.minmovement.hashCode());
    result = 31 * result + (this.minmov2 == null ? 0: this.minmov2.hashCode());
    result = 31 * result + (this.fractional == null ? 0: this.fractional.hashCode());
    result = 31 * result + (this.pricescale == null ? 0: this.pricescale.hashCode());
    result = 31 * result + (this.hasIntraday == null ? 0: this.hasIntraday.hashCode());
    result = 31 * result + (this.hasNoVolume == null ? 0: this.hasNoVolume.hashCode());
    result = 31 * result + (this.type == null ? 0: this.type.hashCode());
    result = 31 * result + (this.ticker == null ? 0: this.ticker.hashCode());
    result = 31 * result + (this.timezone == null ? 0: this.timezone.hashCode());
    result = 31 * result + (this.sessionRegular == null ? 0: this.sessionRegular.hashCode());
    result = 31 * result + (this.supportedResolutions == null ? 0: this.supportedResolutions.hashCode());
    result = 31 * result + (this.hasDaily == null ? 0: this.hasDaily.hashCode());
    result = 31 * result + (this.intradayMultipliers == null ? 0: this.intradayMultipliers.hashCode());
    result = 31 * result + (this.hasWeeklyAndMonthly == null ? 0: this.hasWeeklyAndMonthly.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class SymbolInfoArrays {\n");
    
    sb.append("  symbol: ").append(symbol).append("\n");
    sb.append("  description: ").append(description).append("\n");
    sb.append("  exchangeListed: ").append(exchangeListed).append("\n");
    sb.append("  exchangeTraded: ").append(exchangeTraded).append("\n");
    sb.append("  minmovement: ").append(minmovement).append("\n");
    sb.append("  minmov2: ").append(minmov2).append("\n");
    sb.append("  fractional: ").append(fractional).append("\n");
    sb.append("  pricescale: ").append(pricescale).append("\n");
    sb.append("  hasIntraday: ").append(hasIntraday).append("\n");
    sb.append("  hasNoVolume: ").append(hasNoVolume).append("\n");
    sb.append("  type: ").append(type).append("\n");
    sb.append("  ticker: ").append(ticker).append("\n");
    sb.append("  timezone: ").append(timezone).append("\n");
    sb.append("  sessionRegular: ").append(sessionRegular).append("\n");
    sb.append("  supportedResolutions: ").append(supportedResolutions).append("\n");
    sb.append("  hasDaily: ").append(hasDaily).append("\n");
    sb.append("  intradayMultipliers: ").append(intradayMultipliers).append("\n");
    sb.append("  hasWeeklyAndMonthly: ").append(hasWeeklyAndMonthly).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
