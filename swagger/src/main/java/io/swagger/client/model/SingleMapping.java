/**
 * XchangeCrypt REST API Specification
 * TradingView REST API Specification for Brokers (ASP.NET Core 2.0)
 * <p>
 * OpenAPI spec version: v1
 * Contact:
 * <p>
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.List;

/**
 * Map of Broker instrument name to TradingView instrument name
 **/
@ApiModel(description = "Map of Broker instrument name to TradingView instrument name")
public class SingleMapping {

  @SerializedName("f")
  private List<String> f = null;
  @SerializedName("s")
  private String s = null;

  /**
   * An array with the only one string element &amp;ndash; broker symbol name
   **/
  @ApiModelProperty(value = "An array with the only one string element &amp;ndash; broker symbol name")
  public List<String> getF() {
    return f;
  }

  public void setF(List<String> f) {
    this.f = f;
  }

  /**
   * TradingView symbol name with prefix (AA:XXXX)
   **/
  @ApiModelProperty(value = "TradingView symbol name with prefix (AA:XXXX)")
  public String getS() {
    return s;
  }

  public void setS(String s) {
    this.s = s;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SingleMapping singleMapping = (SingleMapping) o;
    return (this.f == null ? singleMapping.f == null : this.f.equals(singleMapping.f)) &&
      (this.s == null ? singleMapping.s == null : this.s.equals(singleMapping.s));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.f == null ? 0 : this.f.hashCode());
    result = 31 * result + (this.s == null ? 0 : this.s.hashCode());
    return result;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SingleMapping {\n");

    sb.append("  f: ").append(f).append("\n");
    sb.append("  s: ").append(s).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
