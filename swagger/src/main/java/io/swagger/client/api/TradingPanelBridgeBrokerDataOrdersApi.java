/**
 * TradingView REST API Specification for Brokers
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 * <p>
 * OpenAPI spec version:
 * <p>
 * <p>
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import com.android.volley.Response;
import com.android.volley.VolleyError;
import io.swagger.client.ApiException;
import io.swagger.client.ApiInvoker;
import io.swagger.client.Pair;
import io.swagger.client.auth.Authentication;
import io.swagger.client.model.*;
import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class TradingPanelBridgeBrokerDataOrdersApi {
  private String basePath = AccountApi.API_DOMAIN + "tradingapi";
  private ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public Authentication getAuthentications(String name) {
    return apiInvoker.getAuthentications().get(name);
  }

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
   * Get a list of executions (i.e. fills or trades) for an account and an instrument. Executions are displayed on a chart
   *
   * @param accountId  The account identifier
   * @param instrument Broker instrument name
   * @param maxCount   Maximum count of executions to return
   * @return InlineResponse20010
   */
  public InlineResponse20010 accountsAccountIdExecutionsGet(String accountId, String instrument, BigDecimal maxCount) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling accountsAccountIdExecutionsGet",
        new ApiException(400, "Missing the required parameter 'accountId' when calling accountsAccountIdExecutionsGet"));
    }
    // verify the required parameter 'instrument' is set
    if (instrument == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'instrument' when calling accountsAccountIdExecutionsGet",
        new ApiException(400, "Missing the required parameter 'instrument' when calling accountsAccountIdExecutionsGet"));
    }

    // create path and map variables
    String path = "/accounts/{accountId}/executions".replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "instrument", instrument));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "maxCount", maxCount));
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (InlineResponse20010) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20010.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError) ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError);
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * Get a list of executions (i.e. fills or trades) for an account and an instrument. Executions are displayed on a chart
   *
   * @param accountId The account identifier   * @param instrument Broker instrument name   * @param maxCount Maximum count of executions to return
   */
  public void accountsAccountIdExecutionsGet(String accountId, String instrument, BigDecimal maxCount, final Response.Listener<InlineResponse20010> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling accountsAccountIdExecutionsGet",
        new ApiException(400, "Missing the required parameter 'accountId' when calling accountsAccountIdExecutionsGet"));
    }
    // verify the required parameter 'instrument' is set
    if (instrument == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'instrument' when calling accountsAccountIdExecutionsGet",
        new ApiException(400, "Missing the required parameter 'instrument' when calling accountsAccountIdExecutionsGet"));
    }

    // create path and map variables
    String path = "/accounts/{accountId}/executions".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "instrument", instrument));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "maxCount", maxCount));


    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse20010) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20010.class));
            } catch (ApiException exception) {
              errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
        }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
        });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }

  /**
   * Get a list of tradeable instruments that are available for trading with the account specified
   *
   * @param accountId The account identifier
   * @return InlineResponse20011
   */
  public InlineResponse20011 accountsAccountIdInstrumentsGet(String accountId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling accountsAccountIdInstrumentsGet",
        new ApiException(400, "Missing the required parameter 'accountId' when calling accountsAccountIdInstrumentsGet"));
    }

    // create path and map variables
    String path = "/accounts/{accountId}/instruments".replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (InlineResponse20011) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20011.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError) ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError);
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * Get a list of tradeable instruments that are available for trading with the account specified
   *
   * @param accountId The account identifier
   */
  public void accountsAccountIdInstrumentsGet(String accountId, final Response.Listener<InlineResponse20011> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling accountsAccountIdInstrumentsGet",
        new ApiException(400, "Missing the required parameter 'accountId' when calling accountsAccountIdInstrumentsGet"));
    }

    // create path and map variables
    String path = "/accounts/{accountId}/instruments".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse20011) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20011.class));
            } catch (ApiException exception) {
              errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
        }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
        });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }

  /**
   * Get pending orders for an account.
   *
   * @param accountId The account identifier
   * @return InlineResponse2004
   */
  public InlineResponse2004 accountsAccountIdOrdersGet(String accountId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling accountsAccountIdOrdersGet",
        new ApiException(400, "Missing the required parameter 'accountId' when calling accountsAccountIdOrdersGet"));
    }

    // create path and map variables
    String path = "/accounts/{accountId}/orders".replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (InlineResponse2004) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2004.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError) ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError);
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * Get pending orders for an account.
   *
   * @param accountId The account identifier
   */
  public void accountsAccountIdOrdersGet(String accountId, final Response.Listener<InlineResponse2004> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling accountsAccountIdOrdersGet",
        new ApiException(400, "Missing the required parameter 'accountId' when calling accountsAccountIdOrdersGet"));
    }

    // create path and map variables
    String path = "/accounts/{accountId}/orders".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2004) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2004.class));
            } catch (ApiException exception) {
              errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
        }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
        });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }

  /**
   * Get order history for an account. It is expected that returned orders will have a final status (rejected, filled, cancelled). This request is optional. If you don&#39;t support history of orders set &#x60;AccountFlags::supportOrdersHistory&#x60; to &#x60;false&#x60;.
   *
   * @param accountId The account identifier
   * @param maxCount  Maximum amount of orders to return
   * @return InlineResponse2004
   */
  public InlineResponse2004 accountsAccountIdOrdersHistoryGet(String accountId, BigDecimal maxCount) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling accountsAccountIdOrdersHistoryGet",
        new ApiException(400, "Missing the required parameter 'accountId' when calling accountsAccountIdOrdersHistoryGet"));
    }

    // create path and map variables
    String path = "/accounts/{accountId}/ordersHistory".replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "maxCount", maxCount));
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (InlineResponse2004) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2004.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError) ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError);
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * Get order history for an account. It is expected that returned orders will have a final status (rejected, filled, cancelled). This request is optional. If you don&#39;t support history of orders set &#x60;AccountFlags::supportOrdersHistory&#x60; to &#x60;false&#x60;.
   *
   * @param accountId The account identifier   * @param maxCount Maximum amount of orders to return
   */
  public void accountsAccountIdOrdersHistoryGet(String accountId, BigDecimal maxCount, final Response.Listener<InlineResponse2004> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling accountsAccountIdOrdersHistoryGet",
        new ApiException(400, "Missing the required parameter 'accountId' when calling accountsAccountIdOrdersHistoryGet"));
    }

    // create path and map variables
    String path = "/accounts/{accountId}/ordersHistory".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "maxCount", maxCount));


    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2004) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2004.class));
            } catch (ApiException exception) {
              errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
        }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
        });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }

  /**
   * Cancel an existing order
   *
   * @param accountId The account identifier
   * @param orderId   Order ID
   * @return InlineResponse2007
   */
  public InlineResponse2007 accountsAccountIdOrdersOrderIdDelete(String accountId, String orderId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling accountsAccountIdOrdersOrderIdDelete",
        new ApiException(400, "Missing the required parameter 'accountId' when calling accountsAccountIdOrdersOrderIdDelete"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling accountsAccountIdOrdersOrderIdDelete",
        new ApiException(400, "Missing the required parameter 'orderId' when calling accountsAccountIdOrdersOrderIdDelete"));
    }

    // create path and map variables
    String path = "/accounts/{accountId}/orders/{orderId}".replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (InlineResponse2007) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2007.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError) ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError);
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * Cancel an existing order
   *
   * @param accountId The account identifier   * @param orderId Order ID
   */
  public void accountsAccountIdOrdersOrderIdDelete(String accountId, String orderId, final Response.Listener<InlineResponse2007> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling accountsAccountIdOrdersOrderIdDelete",
        new ApiException(400, "Missing the required parameter 'accountId' when calling accountsAccountIdOrdersOrderIdDelete"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling accountsAccountIdOrdersOrderIdDelete",
        new ApiException(400, "Missing the required parameter 'orderId' when calling accountsAccountIdOrdersOrderIdDelete"));
    }

    // create path and map variables
    String path = "/accounts/{accountId}/orders/{orderId}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2007) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2007.class));
            } catch (ApiException exception) {
              errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
        }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
        });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }

  /**
   * Get an order for an account. It can be an active or historical order.
   *
   * @param accountId The account identifier
   * @param orderId   Order ID
   * @return InlineResponse2006
   */
  public InlineResponse2006 accountsAccountIdOrdersOrderIdGet(String accountId, String orderId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling accountsAccountIdOrdersOrderIdGet",
        new ApiException(400, "Missing the required parameter 'accountId' when calling accountsAccountIdOrdersOrderIdGet"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling accountsAccountIdOrdersOrderIdGet",
        new ApiException(400, "Missing the required parameter 'orderId' when calling accountsAccountIdOrdersOrderIdGet"));
    }

    // create path and map variables
    String path = "/accounts/{accountId}/orders/{orderId}".replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (InlineResponse2006) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2006.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError) ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError);
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * Get an order for an account. It can be an active or historical order.
   *
   * @param accountId The account identifier   * @param orderId Order ID
   */
  public void accountsAccountIdOrdersOrderIdGet(String accountId, String orderId, final Response.Listener<InlineResponse2006> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling accountsAccountIdOrdersOrderIdGet",
        new ApiException(400, "Missing the required parameter 'accountId' when calling accountsAccountIdOrdersOrderIdGet"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling accountsAccountIdOrdersOrderIdGet",
        new ApiException(400, "Missing the required parameter 'orderId' when calling accountsAccountIdOrdersOrderIdGet"));
    }

    // create path and map variables
    String path = "/accounts/{accountId}/orders/{orderId}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2006) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2006.class));
            } catch (ApiException exception) {
              errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
        }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
        });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }

  /**
   * Modify an existing order
   *
   * @param accountId        The account identifier
   * @param orderId          Order ID
   * @param qty              Number of units
   * @param limitPrice       Limit Price for Limit or StopLimit order
   * @param stopPrice        Stop Price for Stop or StopLimit order
   * @param stopLoss         StopLoss price (if supported)
   * @param takeProfit       TakeProfit price (if supported)
   * @param digitalSignature Digital signature (if supported)
   * @return InlineResponse2007
   */
  public InlineResponse2007 accountsAccountIdOrdersOrderIdPut(String accountId, String orderId, BigDecimal qty, BigDecimal limitPrice, BigDecimal stopPrice, BigDecimal stopLoss, BigDecimal takeProfit, String digitalSignature) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling accountsAccountIdOrdersOrderIdPut",
        new ApiException(400, "Missing the required parameter 'accountId' when calling accountsAccountIdOrdersOrderIdPut"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling accountsAccountIdOrdersOrderIdPut",
        new ApiException(400, "Missing the required parameter 'orderId' when calling accountsAccountIdOrdersOrderIdPut"));
    }
    // verify the required parameter 'qty' is set
    if (qty == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'qty' when calling accountsAccountIdOrdersOrderIdPut",
        new ApiException(400, "Missing the required parameter 'qty' when calling accountsAccountIdOrdersOrderIdPut"));
    }

    // create path and map variables
    String path = "/accounts/{accountId}/orders/{orderId}".replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (qty != null) {
        localVarBuilder.addTextBody("qty", ApiInvoker.parameterToString(qty), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (limitPrice != null) {
        localVarBuilder.addTextBody("limitPrice", ApiInvoker.parameterToString(limitPrice), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (stopPrice != null) {
        localVarBuilder.addTextBody("stopPrice", ApiInvoker.parameterToString(stopPrice), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (stopLoss != null) {
        localVarBuilder.addTextBody("stopLoss", ApiInvoker.parameterToString(stopLoss), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (takeProfit != null) {
        localVarBuilder.addTextBody("takeProfit", ApiInvoker.parameterToString(takeProfit), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (digitalSignature != null) {
        localVarBuilder.addTextBody("digitalSignature", ApiInvoker.parameterToString(digitalSignature), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("qty", ApiInvoker.parameterToString(qty));
      formParams.put("limitPrice", ApiInvoker.parameterToString(limitPrice));
      formParams.put("stopPrice", ApiInvoker.parameterToString(stopPrice));
      formParams.put("stopLoss", ApiInvoker.parameterToString(stopLoss));
      formParams.put("takeProfit", ApiInvoker.parameterToString(takeProfit));
      formParams.put("digitalSignature", ApiInvoker.parameterToString(digitalSignature));
    }

    String[] authNames = new String[]{"oauth"};

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (InlineResponse2007) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2007.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError) ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError);
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * Modify an existing order
   *
   * @param accountId The account identifier   * @param orderId Order ID   * @param qty Number of units   * @param limitPrice Limit Price for Limit or StopLimit order   * @param stopPrice Stop Price for Stop or StopLimit order   * @param stopLoss StopLoss price (if supported)   * @param takeProfit TakeProfit price (if supported)   * @param digitalSignature Digital signature (if supported)
   */
  public void accountsAccountIdOrdersOrderIdPut(String accountId, String orderId, BigDecimal qty, BigDecimal limitPrice, BigDecimal stopPrice, BigDecimal stopLoss, BigDecimal takeProfit, String digitalSignature, final Response.Listener<InlineResponse2007> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling accountsAccountIdOrdersOrderIdPut",
        new ApiException(400, "Missing the required parameter 'accountId' when calling accountsAccountIdOrdersOrderIdPut"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling accountsAccountIdOrdersOrderIdPut",
        new ApiException(400, "Missing the required parameter 'orderId' when calling accountsAccountIdOrdersOrderIdPut"));
    }
    // verify the required parameter 'qty' is set
    if (qty == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'qty' when calling accountsAccountIdOrdersOrderIdPut",
        new ApiException(400, "Missing the required parameter 'qty' when calling accountsAccountIdOrdersOrderIdPut"));
    }

    // create path and map variables
    String path = "/accounts/{accountId}/orders/{orderId}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();

      if (qty != null) {
        localVarBuilder.addTextBody("qty", ApiInvoker.parameterToString(qty), ApiInvoker.TEXT_PLAIN_UTF8);
      }

      if (limitPrice != null) {
        localVarBuilder.addTextBody("limitPrice", ApiInvoker.parameterToString(limitPrice), ApiInvoker.TEXT_PLAIN_UTF8);
      }

      if (stopPrice != null) {
        localVarBuilder.addTextBody("stopPrice", ApiInvoker.parameterToString(stopPrice), ApiInvoker.TEXT_PLAIN_UTF8);
      }

      if (stopLoss != null) {
        localVarBuilder.addTextBody("stopLoss", ApiInvoker.parameterToString(stopLoss), ApiInvoker.TEXT_PLAIN_UTF8);
      }

      if (takeProfit != null) {
        localVarBuilder.addTextBody("takeProfit", ApiInvoker.parameterToString(takeProfit), ApiInvoker.TEXT_PLAIN_UTF8);
      }

      if (digitalSignature != null) {
        localVarBuilder.addTextBody("digitalSignature", ApiInvoker.parameterToString(digitalSignature), ApiInvoker.TEXT_PLAIN_UTF8);
      }


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("qty", ApiInvoker.parameterToString(qty));
      formParams.put("limitPrice", ApiInvoker.parameterToString(limitPrice));
      formParams.put("stopPrice", ApiInvoker.parameterToString(stopPrice));
      formParams.put("stopLoss", ApiInvoker.parameterToString(stopLoss));
      formParams.put("takeProfit", ApiInvoker.parameterToString(takeProfit));
      formParams.put("digitalSignature", ApiInvoker.parameterToString(digitalSignature));
    }

    String[] authNames = new String[]{"oauth"};

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2007) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2007.class));
            } catch (ApiException exception) {
              errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
        }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
        });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }

  /**
   * Create a new order
   *
   * @param accountId        The account identifier
   * @param instrument       Instrument to open the order on
   * @param qty              The number of units to open order for
   * @param side             Side. Possible values &amp;ndash; &#x60;buy&#x60; and &#x60;sell&#x60;.
   * @param type             Type. Possible values &amp;ndash; &#x60;market&#x60;, &#x60;stop&#x60;, &#x60;limit&#x60;, &#x60;stoplimit&#x60;.
   * @param limitPrice       Limit Price for Limit or StopLimit order
   * @param stopPrice        Stop Price for Stop or StopLimit order
   * @param durationType     Duration ID (if supported)
   * @param durationDateTime Expiration datetime UNIX timestamp (if supported by duration type)
   * @param stopLoss         StopLoss price (if supported)
   * @param takeProfit       TakeProfit price (if supported)
   * @param digitalSignature Digital signature (if supported)
   * @param requestId        Unique identifier for a request
   * @return InlineResponse2005
   */
  public InlineResponse2005 accountsAccountIdOrdersPost(String accountId, String instrument, BigDecimal qty, String side, String type, BigDecimal limitPrice, BigDecimal stopPrice, String durationType, BigDecimal durationDateTime, BigDecimal stopLoss, BigDecimal takeProfit, String digitalSignature, String requestId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling accountsAccountIdOrdersPost",
        new ApiException(400, "Missing the required parameter 'accountId' when calling accountsAccountIdOrdersPost"));
    }
    // verify the required parameter 'instrument' is set
    if (instrument == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'instrument' when calling accountsAccountIdOrdersPost",
        new ApiException(400, "Missing the required parameter 'instrument' when calling accountsAccountIdOrdersPost"));
    }
    // verify the required parameter 'qty' is set
    if (qty == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'qty' when calling accountsAccountIdOrdersPost",
        new ApiException(400, "Missing the required parameter 'qty' when calling accountsAccountIdOrdersPost"));
    }
    // verify the required parameter 'side' is set
    if (side == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'side' when calling accountsAccountIdOrdersPost",
        new ApiException(400, "Missing the required parameter 'side' when calling accountsAccountIdOrdersPost"));
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling accountsAccountIdOrdersPost",
        new ApiException(400, "Missing the required parameter 'type' when calling accountsAccountIdOrdersPost"));
    }

    // create path and map variables
    String path = "/accounts/{accountId}/orders".replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "requestId", requestId));
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (instrument != null) {
        localVarBuilder.addTextBody("instrument", ApiInvoker.parameterToString(instrument), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (qty != null) {
        localVarBuilder.addTextBody("qty", ApiInvoker.parameterToString(qty), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (side != null) {
        localVarBuilder.addTextBody("side", ApiInvoker.parameterToString(side), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (type != null) {
        localVarBuilder.addTextBody("type", ApiInvoker.parameterToString(type), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (limitPrice != null) {
        localVarBuilder.addTextBody("limitPrice", ApiInvoker.parameterToString(limitPrice), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (stopPrice != null) {
        localVarBuilder.addTextBody("stopPrice", ApiInvoker.parameterToString(stopPrice), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (durationType != null) {
        localVarBuilder.addTextBody("durationType", ApiInvoker.parameterToString(durationType), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (durationDateTime != null) {
        localVarBuilder.addTextBody("durationDateTime", ApiInvoker.parameterToString(durationDateTime), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (stopLoss != null) {
        localVarBuilder.addTextBody("stopLoss", ApiInvoker.parameterToString(stopLoss), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (takeProfit != null) {
        localVarBuilder.addTextBody("takeProfit", ApiInvoker.parameterToString(takeProfit), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (digitalSignature != null) {
        localVarBuilder.addTextBody("digitalSignature", ApiInvoker.parameterToString(digitalSignature), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("instrument", ApiInvoker.parameterToString(instrument));
      formParams.put("qty", ApiInvoker.parameterToString(qty));
      formParams.put("side", ApiInvoker.parameterToString(side));
      formParams.put("type", ApiInvoker.parameterToString(type));
      formParams.put("limitPrice", ApiInvoker.parameterToString(limitPrice));
      formParams.put("stopPrice", ApiInvoker.parameterToString(stopPrice));
      formParams.put("durationType", ApiInvoker.parameterToString(durationType));
      formParams.put("durationDateTime", ApiInvoker.parameterToString(durationDateTime));
      formParams.put("stopLoss", ApiInvoker.parameterToString(stopLoss));
      formParams.put("takeProfit", ApiInvoker.parameterToString(takeProfit));
      formParams.put("digitalSignature", ApiInvoker.parameterToString(digitalSignature));
    }

    String[] authNames = new String[]{"oauth"};

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (InlineResponse2005) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2005.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError) ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError);
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * Create a new order
   *
   * @param accountId The account identifier   * @param instrument Instrument to open the order on   * @param qty The number of units to open order for   * @param side Side. Possible values &amp;ndash; &#x60;buy&#x60; and &#x60;sell&#x60;.   * @param type Type. Possible values &amp;ndash; &#x60;market&#x60;, &#x60;stop&#x60;, &#x60;limit&#x60;, &#x60;stoplimit&#x60;.   * @param limitPrice Limit Price for Limit or StopLimit order   * @param stopPrice Stop Price for Stop or StopLimit order   * @param durationType Duration ID (if supported)   * @param durationDateTime Expiration datetime UNIX timestamp (if supported by duration type)   * @param stopLoss StopLoss price (if supported)   * @param takeProfit TakeProfit price (if supported)   * @param digitalSignature Digital signature (if supported)   * @param requestId Unique identifier for a request
   */
  public void accountsAccountIdOrdersPost(String accountId, String instrument, BigDecimal qty, String side, String type, BigDecimal limitPrice, BigDecimal stopPrice, String durationType, BigDecimal durationDateTime, BigDecimal stopLoss, BigDecimal takeProfit, String digitalSignature, String requestId, final Response.Listener<InlineResponse2005> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling accountsAccountIdOrdersPost",
        new ApiException(400, "Missing the required parameter 'accountId' when calling accountsAccountIdOrdersPost"));
    }
    // verify the required parameter 'instrument' is set
    if (instrument == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'instrument' when calling accountsAccountIdOrdersPost",
        new ApiException(400, "Missing the required parameter 'instrument' when calling accountsAccountIdOrdersPost"));
    }
    // verify the required parameter 'qty' is set
    if (qty == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'qty' when calling accountsAccountIdOrdersPost",
        new ApiException(400, "Missing the required parameter 'qty' when calling accountsAccountIdOrdersPost"));
    }
    // verify the required parameter 'side' is set
    if (side == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'side' when calling accountsAccountIdOrdersPost",
        new ApiException(400, "Missing the required parameter 'side' when calling accountsAccountIdOrdersPost"));
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling accountsAccountIdOrdersPost",
        new ApiException(400, "Missing the required parameter 'type' when calling accountsAccountIdOrdersPost"));
    }

    // create path and map variables
    String path = "/accounts/{accountId}/orders".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "requestId", requestId));


    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();

      if (instrument != null) {
        localVarBuilder.addTextBody("instrument", ApiInvoker.parameterToString(instrument), ApiInvoker.TEXT_PLAIN_UTF8);
      }

      if (qty != null) {
        localVarBuilder.addTextBody("qty", ApiInvoker.parameterToString(qty), ApiInvoker.TEXT_PLAIN_UTF8);
      }

      if (side != null) {
        localVarBuilder.addTextBody("side", ApiInvoker.parameterToString(side), ApiInvoker.TEXT_PLAIN_UTF8);
      }

      if (type != null) {
        localVarBuilder.addTextBody("type", ApiInvoker.parameterToString(type), ApiInvoker.TEXT_PLAIN_UTF8);
      }

      if (limitPrice != null) {
        localVarBuilder.addTextBody("limitPrice", ApiInvoker.parameterToString(limitPrice), ApiInvoker.TEXT_PLAIN_UTF8);
      }

      if (stopPrice != null) {
        localVarBuilder.addTextBody("stopPrice", ApiInvoker.parameterToString(stopPrice), ApiInvoker.TEXT_PLAIN_UTF8);
      }

      if (durationType != null) {
        localVarBuilder.addTextBody("durationType", ApiInvoker.parameterToString(durationType), ApiInvoker.TEXT_PLAIN_UTF8);
      }

      if (durationDateTime != null) {
        localVarBuilder.addTextBody("durationDateTime", ApiInvoker.parameterToString(durationDateTime), ApiInvoker.TEXT_PLAIN_UTF8);
      }

      if (stopLoss != null) {
        localVarBuilder.addTextBody("stopLoss", ApiInvoker.parameterToString(stopLoss), ApiInvoker.TEXT_PLAIN_UTF8);
      }

      if (takeProfit != null) {
        localVarBuilder.addTextBody("takeProfit", ApiInvoker.parameterToString(takeProfit), ApiInvoker.TEXT_PLAIN_UTF8);
      }

      if (digitalSignature != null) {
        localVarBuilder.addTextBody("digitalSignature", ApiInvoker.parameterToString(digitalSignature), ApiInvoker.TEXT_PLAIN_UTF8);
      }


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("instrument", ApiInvoker.parameterToString(instrument));
      formParams.put("qty", ApiInvoker.parameterToString(qty));
      formParams.put("side", ApiInvoker.parameterToString(side));
      formParams.put("type", ApiInvoker.parameterToString(type));
      formParams.put("limitPrice", ApiInvoker.parameterToString(limitPrice));
      formParams.put("stopPrice", ApiInvoker.parameterToString(stopPrice));
      formParams.put("durationType", ApiInvoker.parameterToString(durationType));
      formParams.put("durationDateTime", ApiInvoker.parameterToString(durationDateTime));
      formParams.put("stopLoss", ApiInvoker.parameterToString(stopLoss));
      formParams.put("takeProfit", ApiInvoker.parameterToString(takeProfit));
      formParams.put("digitalSignature", ApiInvoker.parameterToString(digitalSignature));
    }

    String[] authNames = new String[]{"oauth"};

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2005) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2005.class));
            } catch (ApiException exception) {
              errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
        }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
        });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }

  /**
   * Get positions for an account
   *
   * @param accountId The account identifier
   * @return InlineResponse2008
   */
  public InlineResponse2008 accountsAccountIdPositionsGet(String accountId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling accountsAccountIdPositionsGet",
        new ApiException(400, "Missing the required parameter 'accountId' when calling accountsAccountIdPositionsGet"));
    }

    // create path and map variables
    String path = "/accounts/{accountId}/positions".replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (InlineResponse2008) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2008.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError) ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError);
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * Get positions for an account
   *
   * @param accountId The account identifier
   */
  public void accountsAccountIdPositionsGet(String accountId, final Response.Listener<InlineResponse2008> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling accountsAccountIdPositionsGet",
        new ApiException(400, "Missing the required parameter 'accountId' when calling accountsAccountIdPositionsGet"));
    }

    // create path and map variables
    String path = "/accounts/{accountId}/positions".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2008) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2008.class));
            } catch (ApiException exception) {
              errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
        }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
        });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }

  /**
   * Close an existing position
   *
   * @param accountId  The account identifier
   * @param positionId Position ID
   * @return InlineResponse2007
   */
  public InlineResponse2007 accountsAccountIdPositionsPositionIdDelete(String accountId, String positionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling accountsAccountIdPositionsPositionIdDelete",
        new ApiException(400, "Missing the required parameter 'accountId' when calling accountsAccountIdPositionsPositionIdDelete"));
    }
    // verify the required parameter 'positionId' is set
    if (positionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'positionId' when calling accountsAccountIdPositionsPositionIdDelete",
        new ApiException(400, "Missing the required parameter 'positionId' when calling accountsAccountIdPositionsPositionIdDelete"));
    }

    // create path and map variables
    String path = "/accounts/{accountId}/positions/{positionId}".replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "positionId" + "\\}", apiInvoker.escapeString(positionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (InlineResponse2007) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2007.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError) ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError);
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * Close an existing position
   *
   * @param accountId The account identifier   * @param positionId Position ID
   */
  public void accountsAccountIdPositionsPositionIdDelete(String accountId, String positionId, final Response.Listener<InlineResponse2007> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling accountsAccountIdPositionsPositionIdDelete",
        new ApiException(400, "Missing the required parameter 'accountId' when calling accountsAccountIdPositionsPositionIdDelete"));
    }
    // verify the required parameter 'positionId' is set
    if (positionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'positionId' when calling accountsAccountIdPositionsPositionIdDelete",
        new ApiException(400, "Missing the required parameter 'positionId' when calling accountsAccountIdPositionsPositionIdDelete"));
    }

    // create path and map variables
    String path = "/accounts/{accountId}/positions/{positionId}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "positionId" + "\\}", apiInvoker.escapeString(positionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2007) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2007.class));
            } catch (ApiException exception) {
              errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
        }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
        });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }

  /**
   * Get a position for an account
   *
   * @param accountId  The account identifier
   * @param positionId Position ID
   * @return InlineResponse2009
   */
  public InlineResponse2009 accountsAccountIdPositionsPositionIdGet(String accountId, String positionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling accountsAccountIdPositionsPositionIdGet",
        new ApiException(400, "Missing the required parameter 'accountId' when calling accountsAccountIdPositionsPositionIdGet"));
    }
    // verify the required parameter 'positionId' is set
    if (positionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'positionId' when calling accountsAccountIdPositionsPositionIdGet",
        new ApiException(400, "Missing the required parameter 'positionId' when calling accountsAccountIdPositionsPositionIdGet"));
    }

    // create path and map variables
    String path = "/accounts/{accountId}/positions/{positionId}".replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "positionId" + "\\}", apiInvoker.escapeString(positionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (InlineResponse2009) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2009.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError) ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError);
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * Get a position for an account
   *
   * @param accountId The account identifier   * @param positionId Position ID
   */
  public void accountsAccountIdPositionsPositionIdGet(String accountId, String positionId, final Response.Listener<InlineResponse2009> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling accountsAccountIdPositionsPositionIdGet",
        new ApiException(400, "Missing the required parameter 'accountId' when calling accountsAccountIdPositionsPositionIdGet"));
    }
    // verify the required parameter 'positionId' is set
    if (positionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'positionId' when calling accountsAccountIdPositionsPositionIdGet",
        new ApiException(400, "Missing the required parameter 'positionId' when calling accountsAccountIdPositionsPositionIdGet"));
    }

    // create path and map variables
    String path = "/accounts/{accountId}/positions/{positionId}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "positionId" + "\\}", apiInvoker.escapeString(positionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2009) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2009.class));
            } catch (ApiException exception) {
              errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
        }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
        });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }

  /**
   * Modify an existing position stop loss or take profit or both
   *
   * @param accountId  The account identifier
   * @param positionId Position ID
   * @param stopLoss   StopLoss price
   * @param takeProfit TakeProfit price
   * @return InlineResponse2007
   */
  public InlineResponse2007 accountsAccountIdPositionsPositionIdPut(String accountId, String positionId, BigDecimal stopLoss, BigDecimal takeProfit) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling accountsAccountIdPositionsPositionIdPut",
        new ApiException(400, "Missing the required parameter 'accountId' when calling accountsAccountIdPositionsPositionIdPut"));
    }
    // verify the required parameter 'positionId' is set
    if (positionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'positionId' when calling accountsAccountIdPositionsPositionIdPut",
        new ApiException(400, "Missing the required parameter 'positionId' when calling accountsAccountIdPositionsPositionIdPut"));
    }

    // create path and map variables
    String path = "/accounts/{accountId}/positions/{positionId}".replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "positionId" + "\\}", apiInvoker.escapeString(positionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (stopLoss != null) {
        localVarBuilder.addTextBody("stopLoss", ApiInvoker.parameterToString(stopLoss), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (takeProfit != null) {
        localVarBuilder.addTextBody("takeProfit", ApiInvoker.parameterToString(takeProfit), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("stopLoss", ApiInvoker.parameterToString(stopLoss));
      formParams.put("takeProfit", ApiInvoker.parameterToString(takeProfit));
    }

    String[] authNames = new String[]{"oauth"};

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (InlineResponse2007) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2007.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError) ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError);
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * Modify an existing position stop loss or take profit or both
   *
   * @param accountId The account identifier   * @param positionId Position ID   * @param stopLoss StopLoss price   * @param takeProfit TakeProfit price
   */
  public void accountsAccountIdPositionsPositionIdPut(String accountId, String positionId, BigDecimal stopLoss, BigDecimal takeProfit, final Response.Listener<InlineResponse2007> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling accountsAccountIdPositionsPositionIdPut",
        new ApiException(400, "Missing the required parameter 'accountId' when calling accountsAccountIdPositionsPositionIdPut"));
    }
    // verify the required parameter 'positionId' is set
    if (positionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'positionId' when calling accountsAccountIdPositionsPositionIdPut",
        new ApiException(400, "Missing the required parameter 'positionId' when calling accountsAccountIdPositionsPositionIdPut"));
    }

    // create path and map variables
    String path = "/accounts/{accountId}/positions/{positionId}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "positionId" + "\\}", apiInvoker.escapeString(positionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();

      if (stopLoss != null) {
        localVarBuilder.addTextBody("stopLoss", ApiInvoker.parameterToString(stopLoss), ApiInvoker.TEXT_PLAIN_UTF8);
      }

      if (takeProfit != null) {
        localVarBuilder.addTextBody("takeProfit", ApiInvoker.parameterToString(takeProfit), ApiInvoker.TEXT_PLAIN_UTF8);
      }


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("stopLoss", ApiInvoker.parameterToString(stopLoss));
      formParams.put("takeProfit", ApiInvoker.parameterToString(takeProfit));
    }

    String[] authNames = new String[]{"oauth"};

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2007) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2007.class));
            } catch (ApiException exception) {
              errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
        }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
        });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }

  /**
   * Get account information.
   *
   * @param accountId The account identifier
   * @param locale    Locale (language) id
   * @return InlineResponse2003
   */
  public InlineResponse2003 accountsAccountIdStateGet(String accountId, String locale) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling accountsAccountIdStateGet",
        new ApiException(400, "Missing the required parameter 'accountId' when calling accountsAccountIdStateGet"));
    }
    // verify the required parameter 'locale' is set
    if (locale == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'locale' when calling accountsAccountIdStateGet",
        new ApiException(400, "Missing the required parameter 'locale' when calling accountsAccountIdStateGet"));
    }

    // create path and map variables
    String path = "/accounts/{accountId}/state".replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "locale", locale));
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (InlineResponse2003) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2003.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError) ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError);
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * Get account information.
   *
   * @param accountId The account identifier   * @param locale Locale (language) id
   */
  public void accountsAccountIdStateGet(String accountId, String locale, final Response.Listener<InlineResponse2003> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling accountsAccountIdStateGet",
        new ApiException(400, "Missing the required parameter 'accountId' when calling accountsAccountIdStateGet"));
    }
    // verify the required parameter 'locale' is set
    if (locale == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'locale' when calling accountsAccountIdStateGet",
        new ApiException(400, "Missing the required parameter 'locale' when calling accountsAccountIdStateGet"));
    }

    // create path and map variables
    String path = "/accounts/{accountId}/state".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "locale", locale));


    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2003) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2003.class));
            } catch (ApiException exception) {
              errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
        }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
        });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }

  /**
   * Get a list of accounts owned by the user
   *
   * @return InlineResponse2002
   */
  public InlineResponse2002 accountsGet() throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/accounts";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (InlineResponse2002) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2002.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError) ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError);
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * Get a list of accounts owned by the user
   */
  public void accountsGet(final Response.Listener<InlineResponse2002> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/accounts".replaceAll("\\{format\\}", "json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2002) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2002.class));
            } catch (ApiException exception) {
              errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
        }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
        });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }

  /**
   * Oauth2 Password authorization
   *
   * @param login    User Login
   * @param password User Password
   * @return InlineResponse200
   */
  public InlineResponse200 authorizePost(String login, String password) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'login' is set
    if (login == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'login' when calling authorizePost",
        new ApiException(400, "Missing the required parameter 'login' when calling authorizePost"));
    }
    // verify the required parameter 'password' is set
    if (password == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'password' when calling authorizePost",
        new ApiException(400, "Missing the required parameter 'password' when calling authorizePost"));
    }

    // create path and map variables
    String path = "/authorize";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (login != null) {
        localVarBuilder.addTextBody("login", ApiInvoker.parameterToString(login), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (password != null) {
        localVarBuilder.addTextBody("password", ApiInvoker.parameterToString(password), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("login", ApiInvoker.parameterToString(login));
      formParams.put("password", ApiInvoker.parameterToString(password));
    }

    String[] authNames = new String[]{};

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (InlineResponse200) ApiInvoker.deserialize(localVarResponse, "", InlineResponse200.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError) ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError);
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * Oauth2 Password authorization
   *
   * @param login User Login   * @param password User Password
   */
  public void authorizePost(String login, String password, final Response.Listener<InlineResponse200> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'login' is set
    if (login == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'login' when calling authorizePost",
        new ApiException(400, "Missing the required parameter 'login' when calling authorizePost"));
    }
    // verify the required parameter 'password' is set
    if (password == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'password' when calling authorizePost",
        new ApiException(400, "Missing the required parameter 'password' when calling authorizePost"));
    }

    // create path and map variables
    String path = "/authorize".replaceAll("\\{format\\}", "json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();

      if (login != null) {
        localVarBuilder.addTextBody("login", ApiInvoker.parameterToString(login), ApiInvoker.TEXT_PLAIN_UTF8);
      }

      if (password != null) {
        localVarBuilder.addTextBody("password", ApiInvoker.parameterToString(password), ApiInvoker.TEXT_PLAIN_UTF8);
      }


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("login", ApiInvoker.parameterToString(login));
      formParams.put("password", ApiInvoker.parameterToString(password));
    }

    String[] authNames = new String[]{};

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse200) ApiInvoker.deserialize(localVarResponse, "", InlineResponse200.class));
            } catch (ApiException exception) {
              errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
        }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
        });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }

  /**
   * Get localized configuration
   *
   * @param locale Locale (language) id
   * @return InlineResponse2001
   */
  public InlineResponse2001 configGet(String locale) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'locale' is set
    if (locale == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'locale' when calling configGet",
        new ApiException(400, "Missing the required parameter 'locale' when calling configGet"));
    }

    // create path and map variables
    String path = "/config";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "locale", locale));
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (InlineResponse2001) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2001.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError) ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError);
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * Get localized configuration
   *
   * @param locale Locale (language) id
   */
  public void configGet(String locale, final Response.Listener<InlineResponse2001> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'locale' is set
    if (locale == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'locale' when calling configGet",
        new ApiException(400, "Missing the required parameter 'locale' when calling configGet"));
    }

    // create path and map variables
    String path = "/config".replaceAll("\\{format\\}", "json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "locale", locale));


    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2001) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2001.class));
            } catch (ApiException exception) {
              errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
        }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
        });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }

  /**
   * Get current depth of market for the instrument. Optional.
   *
   * @param symbol instrument name
   * @return InlineResponse20013
   */
  public InlineResponse20013 depthGet(String symbol) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'symbol' is set
    if (symbol == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbol' when calling depthGet",
        new ApiException(400, "Missing the required parameter 'symbol' when calling depthGet"));
    }

    // create path and map variables
    String path = "/depth";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "symbol", symbol));
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (InlineResponse20013) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20013.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError) ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError);
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * Get current depth of market for the instrument. Optional.
   *
   * @param symbol instrument name
   */
  public void depthGet(String symbol, final Response.Listener<InlineResponse20013> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'symbol' is set
    if (symbol == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbol' when calling depthGet",
        new ApiException(400, "Missing the required parameter 'symbol' when calling depthGet"));
    }

    // create path and map variables
    String path = "/depth".replaceAll("\\{format\\}", "json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "symbol", symbol));


    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse20013) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20013.class));
            } catch (ApiException exception) {
              errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
        }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
        });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }

  /**
   * Bars request. You can find examples in the [documentation](https://github.com/tradingview/charting_library/wiki/UDF#bars).
   *
   * @param symbol     Symbol name or ticker
   * @param resolution Symbol resolution. Possible resolutions are daily (&#x60;1D&#x60;, &#x60;2D&#x60; ... ), weekly (&#x60;1W&#x60;, &#x60;2W&#x60; ...), monthly (&#x60;1M&#x60;, &#x60;2M&#x60;...) and an intra-day resolution &amp;ndash; minutes(&#x60;1&#x60;, &#x60;2&#x60; ...).
   * @param from       Unix timestamp (UTC) of the leftmost required bar, including &#x60;from&#x60;.
   * @param to         Unix timestamp (UTC) of the rightmost required bar, including &#x60;to&#x60;.
   * @param countback  Number of bars (higher priority than &#x60;from&#x60;) starting with &#x60;to&#x60;. If &#x60;countback&#x60; is set, &#x60;from&#x60; should be ignorred. It is used only by tradingview.com, Trading Terminal will never use it.
   * @return BarsArrays
   */
  public BarsArrays historyGet(String symbol, String resolution, BigDecimal from, BigDecimal to, BigDecimal countback) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'symbol' is set
    if (symbol == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbol' when calling historyGet",
        new ApiException(400, "Missing the required parameter 'symbol' when calling historyGet"));
    }
    // verify the required parameter 'resolution' is set
    if (resolution == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'resolution' when calling historyGet",
        new ApiException(400, "Missing the required parameter 'resolution' when calling historyGet"));
    }
    // verify the required parameter 'from' is set
    if (from == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'from' when calling historyGet",
        new ApiException(400, "Missing the required parameter 'from' when calling historyGet"));
    }
    // verify the required parameter 'to' is set
    if (to == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'to' when calling historyGet",
        new ApiException(400, "Missing the required parameter 'to' when calling historyGet"));
    }

    // create path and map variables
    String path = "/history";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "symbol", symbol));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "resolution", resolution));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "from", from));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "to", to));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "countback", countback));
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (BarsArrays) ApiInvoker.deserialize(localVarResponse, "", BarsArrays.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError) ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError);
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * Bars request. You can find examples in the [documentation](https://github.com/tradingview/charting_library/wiki/UDF#bars).
   *
   * @param symbol Symbol name or ticker   * @param resolution Symbol resolution. Possible resolutions are daily (&#x60;1D&#x60;, &#x60;2D&#x60; ... ), weekly (&#x60;1W&#x60;, &#x60;2W&#x60; ...), monthly (&#x60;1M&#x60;, &#x60;2M&#x60;...) and an intra-day resolution &amp;ndash; minutes(&#x60;1&#x60;, &#x60;2&#x60; ...).   * @param from Unix timestamp (UTC) of the leftmost required bar, including &#x60;from&#x60;.   * @param to Unix timestamp (UTC) of the rightmost required bar, including &#x60;to&#x60;.   * @param countback Number of bars (higher priority than &#x60;from&#x60;) starting with &#x60;to&#x60;. If &#x60;countback&#x60; is set, &#x60;from&#x60; should be ignorred. It is used only by tradingview.com, Trading Terminal will never use it.
   */
  public void historyGet(String symbol, String resolution, BigDecimal from, BigDecimal to, BigDecimal countback, final Response.Listener<BarsArrays> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'symbol' is set
    if (symbol == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbol' when calling historyGet",
        new ApiException(400, "Missing the required parameter 'symbol' when calling historyGet"));
    }
    // verify the required parameter 'resolution' is set
    if (resolution == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'resolution' when calling historyGet",
        new ApiException(400, "Missing the required parameter 'resolution' when calling historyGet"));
    }
    // verify the required parameter 'from' is set
    if (from == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'from' when calling historyGet",
        new ApiException(400, "Missing the required parameter 'from' when calling historyGet"));
    }
    // verify the required parameter 'to' is set
    if (to == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'to' when calling historyGet",
        new ApiException(400, "Missing the required parameter 'to' when calling historyGet"));
    }

    // create path and map variables
    String path = "/history".replaceAll("\\{format\\}", "json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "symbol", symbol));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "resolution", resolution));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "from", from));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "to", to));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "countback", countback));


    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BarsArrays) ApiInvoker.deserialize(localVarResponse, "", BarsArrays.class));
            } catch (ApiException exception) {
              errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
        }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
        });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }

  /**
   * Return all broker instruments with corresponding TradingView instruments. It is required to add a Broker to TradingView.com. It is not required for Trading Terminal integration. This request works without authorization!
   *
   * @return SymbolMapping
   */
  public SymbolMapping mappingGet() throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/mapping";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{};

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (SymbolMapping) ApiInvoker.deserialize(localVarResponse, "", SymbolMapping.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError) ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError);
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * Return all broker instruments with corresponding TradingView instruments. It is required to add a Broker to TradingView.com. It is not required for Trading Terminal integration. This request works without authorization!
   */
  public void mappingGet(final Response.Listener<SymbolMapping> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/mapping".replaceAll("\\{format\\}", "json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{};

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SymbolMapping) ApiInvoker.deserialize(localVarResponse, "", SymbolMapping.class));
            } catch (ApiException exception) {
              errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
        }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
        });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }

  /**
   * Get current prices of the instrument. You can see an example of this response [here](https://demo_feed.tradingview.com/quotes?symbols&#x3D;AAPL%2CMSFT%2CIBM%2CNasdaqNM%3AAAPL).
   *
   * @param symbols comma separated symbols
   * @return InlineResponse20012
   */
  public InlineResponse20012 quotesGet(String symbols) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'symbols' is set
    if (symbols == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbols' when calling quotesGet",
        new ApiException(400, "Missing the required parameter 'symbols' when calling quotesGet"));
    }

    // create path and map variables
    String path = "/quotes";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "symbols", symbols));
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (InlineResponse20012) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20012.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError) ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError);
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * Get current prices of the instrument. You can see an example of this response [here](https://demo_feed.tradingview.com/quotes?symbols&#x3D;AAPL%2CMSFT%2CIBM%2CNasdaqNM%3AAAPL).
   *
   * @param symbols comma separated symbols
   */
  public void quotesGet(String symbols, final Response.Listener<InlineResponse20012> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'symbols' is set
    if (symbols == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbols' when calling quotesGet",
        new ApiException(400, "Missing the required parameter 'symbols' when calling quotesGet"));
    }

    // create path and map variables
    String path = "/quotes".replaceAll("\\{format\\}", "json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "symbols", symbols));


    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse20012) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20012.class));
            } catch (ApiException exception) {
              errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
        }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
        });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }

  /**
   * Stream of prices. Server constantly keeps the connection alive. If the connection is broken the server constantly tries to restore it. Transfer mode is &#39;chunked encoding&#39;. The data feed should set &#39;Transfer-Encoding: chunked&#39; and make sure that all intermediate proxies are set to use this mode. All messages are finished with &#39;\\n&#39;. Streaming data should contain real-time only. It shouldn&#39;t contain snapshots of data.
   *
   * @return InlineResponse20014
   */
  public InlineResponse20014 streamingGet() throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/streaming";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (InlineResponse20014) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20014.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError) ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError);
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * Stream of prices. Server constantly keeps the connection alive. If the connection is broken the server constantly tries to restore it. Transfer mode is &#39;chunked encoding&#39;. The data feed should set &#39;Transfer-Encoding: chunked&#39; and make sure that all intermediate proxies are set to use this mode. All messages are finished with &#39;\\n&#39;. Streaming data should contain real-time only. It shouldn&#39;t contain snapshots of data.
   */
  public void streamingGet(final Response.Listener<InlineResponse20014> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/streaming".replaceAll("\\{format\\}", "json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse20014) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20014.class));
            } catch (ApiException exception) {
              errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
        }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
        });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }

  /**
   * Get a list of all instruments
   *
   * @return SymbolInfoArrays
   */
  public SymbolInfoArrays symbolInfoGet() throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/symbol_info";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (SymbolInfoArrays) ApiInvoker.deserialize(localVarResponse, "", SymbolInfoArrays.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError) ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError);
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * Get a list of all instruments
   */
  public void symbolInfoGet(final Response.Listener<SymbolInfoArrays> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/symbol_info".replaceAll("\\{format\\}", "json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"oauth"};

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SymbolInfoArrays) ApiInvoker.deserialize(localVarResponse, "", SymbolInfoArrays.class));
            } catch (ApiException exception) {
              errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
        }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
        });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
