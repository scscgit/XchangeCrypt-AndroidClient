/**
 * XchangeCrypt REST API Specification
 * TradingView REST API Specification for Brokers (ASP.NET Core 2.0)
 * <p>
 * OpenAPI spec version: v1
 * Contact:
 * <p>
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import com.android.volley.Response;
import com.android.volley.VolleyError;
import io.swagger.client.ApiException;
import io.swagger.client.ApiInvoker;
import io.swagger.client.Pair;
import io.swagger.client.model.ProfileDetails;
import io.swagger.client.model.WalletDetails;
import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class UserBridgeApi {
  String basePath;
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public UserBridgeApi(String basePath) {
    this.basePath = basePath;
  }

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
   * Receives all profile details related to an account of the authorized user.
   *
   * @return ProfileDetails
   */
  public ProfileDetails profile() throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/profile";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"Bearer"};

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (ProfileDetails) ApiInvoker.deserialize(localVarResponse, "", ProfileDetails.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError) ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * Receives all profile details related to an account of the authorized user.
   */
  public void profile(final Response.Listener<ProfileDetails> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/profile".replaceAll("\\{format\\}", "json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    String[] contentTypes = {

    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"Bearer"};

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProfileDetails) ApiInvoker.deserialize(localVarResponse, "", ProfileDetails.class));
            } catch (ApiException exception) {
              errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
        }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
        });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }

  /**
   * Receives details of a single specific wallet of the authorized user.
   *
   * @param accountId  The account identifier.
   * @param coinSymbol A unique symbol identification of a coin.
   * @return WalletDetails
   */
  public WalletDetails wallet(String accountId, String coinSymbol) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      throw new ApiException(400, "Missing the required parameter 'accountId' when calling wallet");
    }
    // verify the required parameter 'coinSymbol' is set
    if (coinSymbol == null) {
      throw new ApiException(400, "Missing the required parameter 'coinSymbol' when calling wallet");
    }

    // create path and map variables
    String path = "/accounts/{accountId}/wallets/{coinSymbol}".replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "coinSymbol" + "\\}", apiInvoker.escapeString(coinSymbol.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"Bearer"};

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (WalletDetails) ApiInvoker.deserialize(localVarResponse, "", WalletDetails.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError) ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * Receives details of a single specific wallet of the authorized user.
   *
   * @param accountId  The account identifier.
   * @param coinSymbol A unique symbol identification of a coin.
   */
  public void wallet(String accountId, String coinSymbol, final Response.Listener<WalletDetails> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      errorListener.onErrorResponse(new VolleyError("Missing the required parameter 'accountId' when calling wallet",
        new ApiException(400, "Missing the required parameter 'accountId' when calling wallet")));
    }
    // verify the required parameter 'coinSymbol' is set
    if (coinSymbol == null) {
      errorListener.onErrorResponse(new VolleyError("Missing the required parameter 'coinSymbol' when calling wallet",
        new ApiException(400, "Missing the required parameter 'coinSymbol' when calling wallet")));
    }

    // create path and map variables
    String path = "/accounts/{accountId}/wallets/{coinSymbol}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "coinSymbol" + "\\}", apiInvoker.escapeString(coinSymbol.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    String[] contentTypes = {

    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"Bearer"};

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((WalletDetails) ApiInvoker.deserialize(localVarResponse, "", WalletDetails.class));
            } catch (ApiException exception) {
              errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
        }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
        });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }

  /**
   * Requests a coin withdrawal from a specific wallet of the authorized user.
   *
   * @param accountId  The account identifier.
   * @param coinSymbol A unique symbol identification of a coin.
   * @return String
   */
  public String walletGenerate(String accountId, String coinSymbol) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      throw new ApiException(400, "Missing the required parameter 'accountId' when calling walletGenerate");
    }
    // verify the required parameter 'coinSymbol' is set
    if (coinSymbol == null) {
      throw new ApiException(400, "Missing the required parameter 'coinSymbol' when calling walletGenerate");
    }

    // create path and map variables
    String path = "/accounts/{accountId}/wallets/{coinSymbol}/generate".replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "coinSymbol" + "\\}", apiInvoker.escapeString(coinSymbol.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"Bearer"};

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError) ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * Requests a coin withdrawal from a specific wallet of the authorized user.
   *
   * @param accountId The account identifier.   * @param coinSymbol A unique symbol identification of a coin.
   */
  public void walletGenerate(String accountId, String coinSymbol, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      errorListener.onErrorResponse(new VolleyError("Missing the required parameter 'accountId' when calling walletGenerate",
        new ApiException(400, "Missing the required parameter 'accountId' when calling walletGenerate")));
    }
    // verify the required parameter 'coinSymbol' is set
    if (coinSymbol == null) {
      errorListener.onErrorResponse(new VolleyError("Missing the required parameter 'coinSymbol' when calling walletGenerate",
        new ApiException(400, "Missing the required parameter 'coinSymbol' when calling walletGenerate")));
    }

    // create path and map variables
    String path = "/accounts/{accountId}/wallets/{coinSymbol}/generate".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "coinSymbol" + "\\}", apiInvoker.escapeString(coinSymbol.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    String[] contentTypes = {

    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"Bearer"};

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse, "", String.class));
            } catch (ApiException exception) {
              errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
        }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
        });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }

  /**
   * Requests a coin withdrawal from a specific wallet of the authorized user.
   *
   * @param accountId          The account identifier.
   * @param coinSymbol         A unique symbol identification of a coin.
   * @param recipientPublicKey Recipient address of a wallet for coins to be sent to
   * @param withdrawalAmount   Amount of balance to withdraw, represented in multiplies of the lowest tradable amount, which is specified by the wallet
   * @return String
   */
  public String walletWithdraw(String accountId, String coinSymbol, String recipientPublicKey, Double withdrawalAmount) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      throw new ApiException(400, "Missing the required parameter 'accountId' when calling walletWithdraw");
    }
    // verify the required parameter 'coinSymbol' is set
    if (coinSymbol == null) {
      throw new ApiException(400, "Missing the required parameter 'coinSymbol' when calling walletWithdraw");
    }
    // verify the required parameter 'recipientPublicKey' is set
    if (recipientPublicKey == null) {
      throw new ApiException(400, "Missing the required parameter 'recipientPublicKey' when calling walletWithdraw");
    }
    // verify the required parameter 'withdrawalAmount' is set
    if (withdrawalAmount == null) {
      throw new ApiException(400, "Missing the required parameter 'withdrawalAmount' when calling walletWithdraw");
    }

    // create path and map variables
    String path = "/accounts/{accountId}/wallets/{coinSymbol}/withdraw".replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "coinSymbol" + "\\}", apiInvoker.escapeString(coinSymbol.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (recipientPublicKey != null) {
        localVarBuilder.addTextBody("recipientPublicKey", ApiInvoker.parameterToString(recipientPublicKey), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (withdrawalAmount != null) {
        localVarBuilder.addTextBody("withdrawalAmount", ApiInvoker.parameterToString(withdrawalAmount), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("recipientPublicKey", ApiInvoker.parameterToString(recipientPublicKey));
      formParams.put("withdrawalAmount", ApiInvoker.parameterToString(withdrawalAmount));
    }

    String[] authNames = new String[]{"Bearer"};

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError) ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * Requests a coin withdrawal from a specific wallet of the authorized user.
   *
   * @param accountId          The account identifier.
   * @param coinSymbol         A unique symbol identification of a coin.
   * @param recipientPublicKey Recipient address of a wallet for coins to be sent to
   * @param withdrawalAmount   Amount of balance to withdraw, represented in multiplies of the lowest tradable amount, which is specified by the wallet
   */
  public void walletWithdraw(String accountId, String coinSymbol, String recipientPublicKey, Double withdrawalAmount, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      errorListener.onErrorResponse(new VolleyError("Missing the required parameter 'accountId' when calling walletWithdraw",
        new ApiException(400, "Missing the required parameter 'accountId' when calling walletWithdraw")));
    }
    // verify the required parameter 'coinSymbol' is set
    if (coinSymbol == null) {
      errorListener.onErrorResponse(new VolleyError("Missing the required parameter 'coinSymbol' when calling walletWithdraw",
        new ApiException(400, "Missing the required parameter 'coinSymbol' when calling walletWithdraw")));
    }
    // verify the required parameter 'recipientPublicKey' is set
    if (recipientPublicKey == null) {
      errorListener.onErrorResponse(new VolleyError("Missing the required parameter 'recipientPublicKey' when calling walletWithdraw",
        new ApiException(400, "Missing the required parameter 'recipientPublicKey' when calling walletWithdraw")));
    }
    // verify the required parameter 'withdrawalAmount' is set
    if (withdrawalAmount == null) {
      errorListener.onErrorResponse(new VolleyError("Missing the required parameter 'withdrawalAmount' when calling walletWithdraw",
        new ApiException(400, "Missing the required parameter 'withdrawalAmount' when calling walletWithdraw")));
    }

    // create path and map variables
    String path = "/accounts/{accountId}/wallets/{coinSymbol}/withdraw".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "coinSymbol" + "\\}", apiInvoker.escapeString(coinSymbol.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();

      if (recipientPublicKey != null) {
        localVarBuilder.addTextBody("recipientPublicKey", ApiInvoker.parameterToString(recipientPublicKey), ApiInvoker.TEXT_PLAIN_UTF8);
      }

      if (withdrawalAmount != null) {
        localVarBuilder.addTextBody("withdrawalAmount", ApiInvoker.parameterToString(withdrawalAmount), ApiInvoker.TEXT_PLAIN_UTF8);
      }


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("recipientPublicKey", ApiInvoker.parameterToString(recipientPublicKey));
      formParams.put("withdrawalAmount", ApiInvoker.parameterToString(withdrawalAmount));
    }

    String[] authNames = new String[]{"Bearer"};

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse, "", String.class));
            } catch (ApiException exception) {
              errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
        }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
        });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }

  /**
   * Receives details of all wallets of the authorized user.  &lt;param name&#x3D;\&quot;accountId\&quot;&gt;The account identifier.&lt;/param&gt;
   *
   * @param accountId
   * @return List<WalletDetails>
   */
  public List<WalletDetails> wallets(String accountId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      throw new ApiException(400, "Missing the required parameter 'accountId' when calling wallets");
    }

    // create path and map variables
    String path = "/accounts/{accountId}/wallets".replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"Bearer"};

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (List<WalletDetails>) ApiInvoker.deserialize(localVarResponse, "array", WalletDetails.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError) ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * Receives details of all wallets of the authorized user.  &lt;param name&#x3D;\&quot;accountId\&quot;&gt;The account identifier.&lt;/param&gt;
   *
   * @param accountId
   */
  public void wallets(String accountId, final Response.Listener<List<WalletDetails>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      errorListener.onErrorResponse(new VolleyError("Missing the required parameter 'accountId' when calling wallets",
        new ApiException(400, "Missing the required parameter 'accountId' when calling wallets")));
    }

    // create path and map variables
    String path = "/accounts/{accountId}/wallets".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    String[] contentTypes = {

    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"Bearer"};

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<WalletDetails>) ApiInvoker.deserialize(localVarResponse, "array", WalletDetails.class));
            } catch (ApiException exception) {
              errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
        }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
        });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
