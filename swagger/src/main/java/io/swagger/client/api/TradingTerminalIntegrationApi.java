/**
 * XchangeCrypt REST API Specification
 * TradingView REST API Specification for Brokers (ASP.NET Core 2.0)
 * <p>
 * OpenAPI spec version: v1
 * Contact:
 * <p>
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import com.android.volley.Response;
import com.android.volley.VolleyError;
import io.swagger.client.ApiException;
import io.swagger.client.ApiInvoker;
import io.swagger.client.Pair;
import io.swagger.client.model.MarksArrays;
import io.swagger.client.model.TimescaleMark;
import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class TradingTerminalIntegrationApi {
  String basePath;
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public TradingTerminalIntegrationApi(String basePath) {
    this.basePath = basePath;
  }

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
   * Request for bar marks (circles on top of bars). You can display custom marks only in the Trading Terminal
   *
   * @param symbol     Symbol name or ticker
   * @param resolution Symbol resolution. Possible resolutions are daily (&#x60;1D&#x60;, &#x60;2D&#x60; ... ), weekly (&#x60;1W&#x60;, &#x60;2W&#x60; ...), monthly (&#x60;1M&#x60;, &#x60;2M&#x60;...) and an intra-day resolution &amp;amp;ndash; minutes(&#x60;1&#x60;, &#x60;2&#x60; ...).
   * @param from       Unix timestamp (UTC) of the leftmost required bar, including &#x60;from&#x60;.
   * @param to         Unix timestamp (UTC) of the rightmost required bar, including &#x60;to&#x60;.
   * @return MarksArrays
   */
  public MarksArrays marksGet(String symbol, String resolution, Double from, Double to) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'symbol' is set
    if (symbol == null) {
      throw new ApiException(400, "Missing the required parameter 'symbol' when calling marksGet");
    }
    // verify the required parameter 'resolution' is set
    if (resolution == null) {
      throw new ApiException(400, "Missing the required parameter 'resolution' when calling marksGet");
    }
    // verify the required parameter 'from' is set
    if (from == null) {
      throw new ApiException(400, "Missing the required parameter 'from' when calling marksGet");
    }
    // verify the required parameter 'to' is set
    if (to == null) {
      throw new ApiException(400, "Missing the required parameter 'to' when calling marksGet");
    }

    // create path and map variables
    String path = "/trading/marks";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "symbol", symbol));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "resolution", resolution));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "from", from));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "to", to));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"Bearer"};

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (MarksArrays) ApiInvoker.deserialize(localVarResponse, "", MarksArrays.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError) ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError);
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * Request for bar marks (circles on top of bars). You can display custom marks only in the Trading Terminal
   *
   * @param symbol Symbol name or ticker   * @param resolution Symbol resolution. Possible resolutions are daily (&#x60;1D&#x60;, &#x60;2D&#x60; ... ), weekly (&#x60;1W&#x60;, &#x60;2W&#x60; ...), monthly (&#x60;1M&#x60;, &#x60;2M&#x60;...) and an intra-day resolution &amp;amp;ndash; minutes(&#x60;1&#x60;, &#x60;2&#x60; ...).   * @param from Unix timestamp (UTC) of the leftmost required bar, including &#x60;from&#x60;.   * @param to Unix timestamp (UTC) of the rightmost required bar, including &#x60;to&#x60;.
   */
  public void marksGet(String symbol, String resolution, Double from, Double to, final Response.Listener<MarksArrays> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'symbol' is set
    if (symbol == null) {
      errorListener.onErrorResponse(new VolleyError("Missing the required parameter 'symbol' when calling marksGet",
        new ApiException(400, "Missing the required parameter 'symbol' when calling marksGet")));
      return;
    }
    // verify the required parameter 'resolution' is set
    if (resolution == null) {
      errorListener.onErrorResponse(new VolleyError("Missing the required parameter 'resolution' when calling marksGet",
        new ApiException(400, "Missing the required parameter 'resolution' when calling marksGet")));
      return;
    }
    // verify the required parameter 'from' is set
    if (from == null) {
      errorListener.onErrorResponse(new VolleyError("Missing the required parameter 'from' when calling marksGet",
        new ApiException(400, "Missing the required parameter 'from' when calling marksGet")));
      return;
    }
    // verify the required parameter 'to' is set
    if (to == null) {
      errorListener.onErrorResponse(new VolleyError("Missing the required parameter 'to' when calling marksGet",
        new ApiException(400, "Missing the required parameter 'to' when calling marksGet")));
      return;
    }

    // create path and map variables
    String path = "/trading/marks".replaceAll("\\{format\\}", "json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "symbol", symbol));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "resolution", resolution));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "from", from));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "to", to));


    String[] contentTypes = {

    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"Bearer"};

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MarksArrays) ApiInvoker.deserialize(localVarResponse, "", MarksArrays.class));
            } catch (ApiException exception) {
              errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
        }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
        });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }

  /**
   * Request for timescale marks (circles on the timescale). You can display custom marks only in the Trading Terminal
   *
   * @param symbol     Symbol name or ticker
   * @param resolution Symbol resolution. Possible resolutions are daily (&#x60;1D&#x60;, &#x60;2D&#x60; ... ), weekly (&#x60;1W&#x60;, &#x60;2W&#x60; ...), monthly (&#x60;1M&#x60;, &#x60;2M&#x60;...) and an intra-day resolution &amp;amp;ndash; minutes(&#x60;1&#x60;, &#x60;2&#x60; ...).
   * @param from       Unix timestamp (UTC) of the leftmost required bar, including &#x60;from&#x60;.
   * @param to         Unix timestamp (UTC) of the rightmost required bar, including &#x60;to&#x60;.
   * @return List<TimescaleMark>
   */
  public List<TimescaleMark> timescaleMarksGet(String symbol, String resolution, Double from, Double to) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'symbol' is set
    if (symbol == null) {
      throw new ApiException(400, "Missing the required parameter 'symbol' when calling timescaleMarksGet");
    }
    // verify the required parameter 'resolution' is set
    if (resolution == null) {
      throw new ApiException(400, "Missing the required parameter 'resolution' when calling timescaleMarksGet");
    }
    // verify the required parameter 'from' is set
    if (from == null) {
      throw new ApiException(400, "Missing the required parameter 'from' when calling timescaleMarksGet");
    }
    // verify the required parameter 'to' is set
    if (to == null) {
      throw new ApiException(400, "Missing the required parameter 'to' when calling timescaleMarksGet");
    }

    // create path and map variables
    String path = "/trading/timescale_marks";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "symbol", symbol));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "resolution", resolution));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "from", from));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "to", to));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"Bearer"};

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
        return (List<TimescaleMark>) ApiInvoker.deserialize(localVarResponse, "array", TimescaleMark.class);
      } else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    } catch (InterruptedException ex) {
      throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError) ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError);
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

  /**
   * Request for timescale marks (circles on the timescale). You can display custom marks only in the Trading Terminal
   *
   * @param symbol Symbol name or ticker   * @param resolution Symbol resolution. Possible resolutions are daily (&#x60;1D&#x60;, &#x60;2D&#x60; ... ), weekly (&#x60;1W&#x60;, &#x60;2W&#x60; ...), monthly (&#x60;1M&#x60;, &#x60;2M&#x60;...) and an intra-day resolution &amp;amp;ndash; minutes(&#x60;1&#x60;, &#x60;2&#x60; ...).   * @param from Unix timestamp (UTC) of the leftmost required bar, including &#x60;from&#x60;.   * @param to Unix timestamp (UTC) of the rightmost required bar, including &#x60;to&#x60;.
   */
  public void timescaleMarksGet(String symbol, String resolution, Double from, Double to, final Response.Listener<List<TimescaleMark>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'symbol' is set
    if (symbol == null) {
      errorListener.onErrorResponse(new VolleyError("Missing the required parameter 'symbol' when calling timescaleMarksGet",
        new ApiException(400, "Missing the required parameter 'symbol' when calling timescaleMarksGet")));
      return;
    }
    // verify the required parameter 'resolution' is set
    if (resolution == null) {
      errorListener.onErrorResponse(new VolleyError("Missing the required parameter 'resolution' when calling timescaleMarksGet",
        new ApiException(400, "Missing the required parameter 'resolution' when calling timescaleMarksGet")));
      return;
    }
    // verify the required parameter 'from' is set
    if (from == null) {
      errorListener.onErrorResponse(new VolleyError("Missing the required parameter 'from' when calling timescaleMarksGet",
        new ApiException(400, "Missing the required parameter 'from' when calling timescaleMarksGet")));
      return;
    }
    // verify the required parameter 'to' is set
    if (to == null) {
      errorListener.onErrorResponse(new VolleyError("Missing the required parameter 'to' when calling timescaleMarksGet",
        new ApiException(400, "Missing the required parameter 'to' when calling timescaleMarksGet")));
      return;
    }

    // create path and map variables
    String path = "/trading/timescale_marks".replaceAll("\\{format\\}", "json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "symbol", symbol));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "resolution", resolution));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "from", from));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "to", to));


    String[] contentTypes = {

    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[]{"Bearer"};

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<TimescaleMark>) ApiInvoker.deserialize(localVarResponse, "array", TimescaleMark.class));
            } catch (ApiException exception) {
              errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
        }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
        });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
